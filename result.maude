(omod SYSTEM is protecting MODULE . 

  op Controller1 : -> Oid .
  op Controller2 : -> Oid .
  op Controller3 : -> Oid .

  op x : -> Variable .
  op y : -> Variable .
  op x : -> Variable .
  op x : -> Variable .

  op RED : -> Location .
  op GREEN : -> Location .
  op YELLOW : -> Location .
  op RED : -> Location .
  op GREEN : -> Location .
  op YELLOW : -> Location .
  op RED : -> Location .
  op GREEN : -> Location .
  op YELLOW : -> Location .

  op init-Controller1 : -> Object .
  eq init-Controller1 = < Controller1 : Module | loc : RED, mem : ( empty, ( x -> 0 ), ( y -> 0 ) )> .
  op init-Controller2 : -> Object .
  eq init-Controller2 = < Controller2 : Module | loc : RED, mem : ( empty, ( x -> 0 ) )> .
  op init-Controller3 : -> Object .
  eq init-Controller3 = < Controller3 : Module | loc : RED, mem : ( empty, ( x -> 0 ) )> .
  op init-state : -> Object .
  eq init-state = none init-Controller1 init-Controller2 init-Controller3 .

  vars Controller1-M Controller1-M' : Memory .
  vars Controller2-M Controller2-M' : Memory .
  vars Controller3-M Controller3-M' : Memory .

  crl [t1-0] :
    < Controller1 : Module | loc : RED, mem : Controller1-M >
    < Controller2 : Module | loc : RED, mem : Controller2-M >
    < Controller3 : Module | loc : RED, mem : Controller3-M >
  => < Controller1 : Module | loc : RED, mem : Controller1-M' >
     < Controller2 : Module | loc : RED, mem : Controller2-M' >
     < Controller3 : Module | loc : RED, mem : Controller3-M' >
  if ((Controller1-M[x]) < 60)
     /\ ((Controller2-M[x]) < 60)
     /\ ((Controller3-M[x]) < 60)
     /\ Controller1-M' := Controller1-M[x := ((Controller1-M[x]) + 1)][y := (Controller1-M[x := ((Controller1-M[x]) + 1)][x])]
     /\ Controller2-M' := Controller2-M[x := ((Controller2-M[x]) + 1)]
     /\ Controller3-M' := Controller3-M[x := ((Controller3-M[x]) + 1)] .
  
  crl [t2-0] :
    < Controller1 : Module | loc : RED, mem : Controller1-M >
    < Controller2 : Module | loc : RED, mem : Controller2-M >
    < Controller3 : Module | loc : RED, mem : Controller3-M >
  => < Controller1 : Module | loc : GREEN, mem : Controller1-M' >
     < Controller2 : Module | loc : GREEN, mem : Controller2-M' >
     < Controller3 : Module | loc : GREEN, mem : Controller3-M' >
  if ((Controller1-M[x]) >= 60)
     /\ ((Controller2-M[x]) >= 60)
     /\ ((Controller3-M[x]) >= 60)
     /\ Controller1-M' := Controller1-M[x := 0]
     /\ Controller2-M' := Controller2-M[x := 0]
     /\ Controller3-M' := Controller3-M[x := 0] .
  
  crl [t3-0] :
    < Controller1 : Module | loc : GREEN, mem : Controller1-M >
    < Controller2 : Module | loc : GREEN, mem : Controller2-M >
    < Controller3 : Module | loc : GREEN, mem : Controller3-M >
  => < Controller1 : Module | loc : GREEN, mem : Controller1-M' >
     < Controller2 : Module | loc : GREEN, mem : Controller2-M' >
     < Controller3 : Module | loc : GREEN, mem : Controller3-M' >
  if ((Controller1-M[x]) < 60)
     /\ ((Controller2-M[x]) < 60)
     /\ ((Controller3-M[x]) < 60)
     /\ Controller1-M' := Controller1-M[x := ((Controller1-M[x]) + 1)]
     /\ Controller2-M' := Controller2-M[x := ((Controller2-M[x]) + 1)]
     /\ Controller3-M' := Controller3-M[x := ((Controller3-M[x]) + 1)] .
  
  crl [t4-0] :
    < Controller1 : Module | loc : GREEN, mem : Controller1-M >
    < Controller2 : Module | loc : GREEN, mem : Controller2-M >
    < Controller3 : Module | loc : GREEN, mem : Controller3-M >
  => < Controller1 : Module | loc : YELLOW, mem : Controller1-M' >
     < Controller2 : Module | loc : YELLOW, mem : Controller2-M' >
     < Controller3 : Module | loc : YELLOW, mem : Controller3-M' >
  if ((Controller1-M[x]) >= 60)
     /\ ((Controller2-M[x]) >= 60)
     /\ ((Controller3-M[x]) >= 60)
     /\ Controller1-M' := Controller1-M[x := 0]
     /\ Controller2-M' := Controller2-M[x := 0]
     /\ Controller3-M' := Controller3-M[x := 0] .
  
  crl [t5-0] :
    < Controller1 : Module | loc : YELLOW, mem : Controller1-M >
    < Controller2 : Module | loc : YELLOW, mem : Controller2-M >
    < Controller3 : Module | loc : YELLOW, mem : Controller3-M >
  => < Controller1 : Module | loc : YELLOW, mem : Controller1-M' >
     < Controller2 : Module | loc : YELLOW, mem : Controller2-M' >
     < Controller3 : Module | loc : YELLOW, mem : Controller3-M' >
  if ((Controller1-M[x]) < 5)
     /\ ((Controller2-M[x]) < 5)
     /\ ((Controller3-M[x]) < 5)
     /\ Controller1-M' := Controller1-M[x := ((Controller1-M[x]) + 1)]
     /\ Controller2-M' := Controller2-M[x := ((Controller2-M[x]) + 1)]
     /\ Controller3-M' := Controller3-M[x := ((Controller3-M[x]) + 1)] .
  
  crl [t6-0] :
    < Controller1 : Module | loc : YELLOW, mem : Controller1-M >
    < Controller2 : Module | loc : YELLOW, mem : Controller2-M >
    < Controller3 : Module | loc : YELLOW, mem : Controller3-M >
  => < Controller1 : Module | loc : RED, mem : Controller1-M' >
     < Controller2 : Module | loc : RED, mem : Controller2-M' >
     < Controller3 : Module | loc : RED, mem : Controller3-M' >
  if ((Controller1-M[x]) >= 5)
     /\ ((Controller2-M[x]) >= 5)
     /\ ((Controller3-M[x]) >= 5)
     /\ Controller1-M' := Controller1-M[x := 0]
     /\ Controller2-M' := Controller2-M[x := 0]
     /\ Controller3-M' := Controller3-M[x := 0] .
  
endom)
