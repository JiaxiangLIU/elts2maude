Initial termination problem:
1:	eval_main_start() -> eval_main_entry_in()
	eval_main_entry_in() -> eval_main_while.cond_in(nondef.0)
	eval_main_while.cond_in(v_i.0) -> eval_main_while.body_in(v_i.0) [ v_i.0 < 0 ]
	eval_main_while.cond_in(v_i.0) -> eval_main_while.body_in(v_i.0) [ v_i.0 > 0 ]
	eval_main_while.cond_in(v_i.0) -> eval_main_while.end_in() [ v_i.0 = 0 ]
	eval_main_while.body_in(v_i.0) -> eval_main_if.then_in(v_i.0) [ v_i.0 > -5 /\ v_i.0 < 5 ]
	eval_main_while.body_in(v_i.0) -> eval_main_while.cond_in(v_i.0) [ v_i.0 <= -5 ]
	eval_main_while.body_in(v_i.0) -> eval_main_while.cond_in(v_i.0) [ v_i.0 >= 5 ]
	eval_main_if.then_in(v_i.0) -> eval_main_while.cond_in(v_i.0) [ v_i.0 < 0 /\ v_i.0 + 1 > 0 ]
	eval_main_if.then_in(v_i.0) -> eval_main_while.cond_in(v_i.0 + 1) [ v_i.0 < 0 /\ v_i.0 + 1 <= 0 ]
	eval_main_if.then_in(v_i.0) -> eval_main_while.cond_in(v_i.0 - 1) [ v_i.0 >= 0 /\ v_i.0 > 0 ]
	eval_main_if.then_in(v_i.0) -> eval_main_while.cond_in(v_i.0) [ v_i.0 >= 0 /\ v_i.0 <= 0 ]
	eval_main_while.end_in() -> eval_main_stop()

Testing for unsatisfiable constraints removes the following rule from problem 1:
	eval_main_if.then_in(v_i.0) -> eval_main_while.cond_in(v_i.0) [ v_i.0 < 0 /\ v_i.0 + 1 > 0 ]
We thus obtain the following problem:
2:	eval_main_start() -> eval_main_entry_in()
	eval_main_entry_in() -> eval_main_while.cond_in(nondef.0)
	eval_main_while.cond_in(v_i.0) -> eval_main_while.body_in(v_i.0) [ v_i.0 < 0 ]
	eval_main_while.cond_in(v_i.0) -> eval_main_while.body_in(v_i.0) [ v_i.0 > 0 ]
	eval_main_while.cond_in(v_i.0) -> eval_main_while.end_in() [ v_i.0 = 0 ]
	eval_main_while.body_in(v_i.0) -> eval_main_if.then_in(v_i.0) [ v_i.0 > -5 /\ v_i.0 < 5 ]
	eval_main_while.body_in(v_i.0) -> eval_main_while.cond_in(v_i.0) [ v_i.0 <= -5 ]
	eval_main_while.body_in(v_i.0) -> eval_main_while.cond_in(v_i.0) [ v_i.0 >= 5 ]
	eval_main_if.then_in(v_i.0) -> eval_main_while.cond_in(v_i.0 + 1) [ v_i.0 < 0 /\ v_i.0 + 1 <= 0 ]
	eval_main_if.then_in(v_i.0) -> eval_main_while.cond_in(v_i.0 - 1) [ v_i.0 >= 0 /\ v_i.0 > 0 ]
	eval_main_if.then_in(v_i.0) -> eval_main_while.cond_in(v_i.0) [ v_i.0 >= 0 /\ v_i.0 <= 0 ]
	eval_main_while.end_in() -> eval_main_stop()

The termination graph of problem 2 contains 1 nontrivial SCC:
3:	eval_main_while.cond_in(v_i.0) -> eval_main_while.body_in(v_i.0) [ v_i.0 < 0 ]
	eval_main_while.cond_in(v_i.0) -> eval_main_while.body_in(v_i.0) [ v_i.0 > 0 ]
	eval_main_while.body_in(v_i.0) -> eval_main_if.then_in(v_i.0) [ v_i.0 > -5 /\ v_i.0 < 5 ]
	eval_main_while.body_in(v_i.0) -> eval_main_while.cond_in(v_i.0) [ v_i.0 <= -5 ]
	eval_main_while.body_in(v_i.0) -> eval_main_while.cond_in(v_i.0) [ v_i.0 >= 5 ]
	eval_main_if.then_in(v_i.0) -> eval_main_while.cond_in(v_i.0 + 1) [ v_i.0 < 0 /\ v_i.0 + 1 <= 0 ]
	eval_main_if.then_in(v_i.0) -> eval_main_while.cond_in(v_i.0 - 1) [ v_i.0 >= 0 /\ v_i.0 > 0 ]

A polynomial interpretation with
	Pol(eval_main_while.cond_in) = 2*X_1 + 10*X_1^2 + 9
	Pol(eval_main_while.body_in) = 2*X_1 + 10*X_1^2 + 9
	Pol(eval_main_if.then_in) = 10*X_1^2
removes the following rules from problem 3:
	eval_main_while.body_in(v_i.0) -> eval_main_if.then_in(v_i.0) [ v_i.0 > -5 /\ v_i.0 < 5 ]
	eval_main_if.then_in(v_i.0) -> eval_main_while.cond_in(v_i.0 + 1) [ v_i.0 < 0 /\ v_i.0 + 1 <= 0 ]
	eval_main_if.then_in(v_i.0) -> eval_main_while.cond_in(v_i.0 - 1) [ v_i.0 >= 0 /\ v_i.0 > 0 ]
We thus obtain the following problem:
4:	eval_main_while.cond_in(v_i.0) -> eval_main_while.body_in(v_i.0) [ v_i.0 < 0 ]
	eval_main_while.cond_in(v_i.0) -> eval_main_while.body_in(v_i.0) [ v_i.0 > 0 ]
	eval_main_while.body_in(v_i.0) -> eval_main_while.cond_in(v_i.0) [ v_i.0 <= -5 ]
	eval_main_while.body_in(v_i.0) -> eval_main_while.cond_in(v_i.0) [ v_i.0 >= 5 ]

The termination graph of problem 4 contains 2 nontrivial SCCs:
5:	eval_main_while.cond_in(v_i.0) -> eval_main_while.body_in(v_i.0) [ v_i.0 < 0 ]
	eval_main_while.body_in(v_i.0) -> eval_main_while.cond_in(v_i.0) [ v_i.0 <= -5 ]

6:	eval_main_while.cond_in(v_i.0) -> eval_main_while.body_in(v_i.0) [ v_i.0 > 0 ]
	eval_main_while.body_in(v_i.0) -> eval_main_while.cond_in(v_i.0) [ v_i.0 >= 5 ]

By chaining the rule eval_main_while.cond_in(v_i.0) -> eval_main_while.body_in(v_i.0) [ v_i.0 < 0 ] with all rule in problem 5, the following new rules are obtained:
	eval_main_while.cond_in(v_i.0) -> eval_main_while.cond_in(v_i.0) [ v_i.0 < 0 /\ v_i.0 <= -5 ]
We thus obtain the following problem:
7:	eval_main_while.body_in(v_i.0) -> eval_main_while.cond_in(v_i.0) [ v_i.0 <= -5 ]
	eval_main_while.cond_in(v_i.0) -> eval_main_while.cond_in(v_i.0) [ v_i.0 < 0 /\ v_i.0 <= -5 ]

The termination graph of problem 7 contains 1 nontrivial SCC:
8:	eval_main_while.cond_in(v_i.0) -> eval_main_while.cond_in(v_i.0) [ v_i.0 < 0 /\ v_i.0 <= -5 ]

The following termination problem could not be handled:
eval_main_while.cond_in(v_i.0) -> eval_main_while.cond_in(v_i.0) [ v_i.0 < 0 /\ v_i.0 <= -5 ]

Time: 0.793 sec (SMT: 0.770 sec)
