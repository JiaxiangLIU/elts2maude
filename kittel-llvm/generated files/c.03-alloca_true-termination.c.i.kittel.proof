Initial termination problem:
1:	eval_test_fun_start(v_x, v_y, v_z) -> eval_test_fun_entry_in()
	eval_test_fun_entry_in() -> eval_test_fun_while.cond_in(nondef.0)
	eval_test_fun_while.cond_in(v_8) -> eval_test_fun_while.body_in(v_8)
	eval_test_fun_while.cond_in(v_8) -> eval_test_fun_while.end_in()
	eval_test_fun_while.body_in(v_8) -> eval_test_fun_if.then_in(v_8)
	eval_test_fun_while.body_in(v_8) -> eval_test_fun_if.else_in(v_8)
	eval_test_fun_if.then_in(v_8) -> eval_test_fun_if.end_in(v_8)
	eval_test_fun_if.else_in(v_8) -> eval_test_fun_if.end_in(v_8)
	eval_test_fun_if.end_in(v_8) -> eval_test_fun_while.cond_in(v_8)
	eval_test_fun_while.end_in() -> eval_test_fun_stop()
	eval_main_start() -> eval_main_stop()

The termination graph of problem 1 contains 1 nontrivial SCC:
2:	eval_test_fun_while.cond_in(v_8) -> eval_test_fun_while.body_in(v_8)
	eval_test_fun_while.body_in(v_8) -> eval_test_fun_if.then_in(v_8)
	eval_test_fun_while.body_in(v_8) -> eval_test_fun_if.else_in(v_8)
	eval_test_fun_if.then_in(v_8) -> eval_test_fun_if.end_in(v_8)
	eval_test_fun_if.else_in(v_8) -> eval_test_fun_if.end_in(v_8)
	eval_test_fun_if.end_in(v_8) -> eval_test_fun_while.cond_in(v_8)

By chaining the rule eval_test_fun_while.cond_in(v_8) -> eval_test_fun_while.body_in(v_8) with all rules in problem 2, the following new rules are obtained:
	eval_test_fun_while.cond_in(v_8) -> eval_test_fun_if.then_in(v_8)
	eval_test_fun_while.cond_in(v_8) -> eval_test_fun_if.else_in(v_8)
We thus obtain the following problem:
3:	eval_test_fun_while.body_in(v_8) -> eval_test_fun_if.then_in(v_8)
	eval_test_fun_while.body_in(v_8) -> eval_test_fun_if.else_in(v_8)
	eval_test_fun_if.then_in(v_8) -> eval_test_fun_if.end_in(v_8)
	eval_test_fun_if.else_in(v_8) -> eval_test_fun_if.end_in(v_8)
	eval_test_fun_if.end_in(v_8) -> eval_test_fun_while.cond_in(v_8)
	eval_test_fun_while.cond_in(v_8) -> eval_test_fun_if.then_in(v_8)
	eval_test_fun_while.cond_in(v_8) -> eval_test_fun_if.else_in(v_8)

The termination graph of problem 3 contains 1 nontrivial SCC:
4:	eval_test_fun_if.then_in(v_8) -> eval_test_fun_if.end_in(v_8)
	eval_test_fun_if.else_in(v_8) -> eval_test_fun_if.end_in(v_8)
	eval_test_fun_if.end_in(v_8) -> eval_test_fun_while.cond_in(v_8)
	eval_test_fun_while.cond_in(v_8) -> eval_test_fun_if.then_in(v_8)
	eval_test_fun_while.cond_in(v_8) -> eval_test_fun_if.else_in(v_8)

By chaining the rule eval_test_fun_if.then_in(v_8) -> eval_test_fun_if.end_in(v_8) with all rule in problem 4, the following new rules are obtained:
	eval_test_fun_if.then_in(v_8) -> eval_test_fun_while.cond_in(v_8)
We thus obtain the following problem:
5:	eval_test_fun_if.else_in(v_8) -> eval_test_fun_if.end_in(v_8)
	eval_test_fun_if.end_in(v_8) -> eval_test_fun_while.cond_in(v_8)
	eval_test_fun_while.cond_in(v_8) -> eval_test_fun_if.then_in(v_8)
	eval_test_fun_while.cond_in(v_8) -> eval_test_fun_if.else_in(v_8)
	eval_test_fun_if.then_in(v_8) -> eval_test_fun_while.cond_in(v_8)

The termination graph of problem 5 contains 1 nontrivial SCC:
6:	eval_test_fun_if.else_in(v_8) -> eval_test_fun_if.end_in(v_8)
	eval_test_fun_if.end_in(v_8) -> eval_test_fun_while.cond_in(v_8)
	eval_test_fun_while.cond_in(v_8) -> eval_test_fun_if.then_in(v_8)
	eval_test_fun_while.cond_in(v_8) -> eval_test_fun_if.else_in(v_8)
	eval_test_fun_if.then_in(v_8) -> eval_test_fun_while.cond_in(v_8)

By chaining the rule eval_test_fun_if.else_in(v_8) -> eval_test_fun_if.end_in(v_8) with all rule in problem 6, the following new rules are obtained:
	eval_test_fun_if.else_in(v_8) -> eval_test_fun_while.cond_in(v_8)
We thus obtain the following problem:
7:	eval_test_fun_if.end_in(v_8) -> eval_test_fun_while.cond_in(v_8)
	eval_test_fun_while.cond_in(v_8) -> eval_test_fun_if.then_in(v_8)
	eval_test_fun_while.cond_in(v_8) -> eval_test_fun_if.else_in(v_8)
	eval_test_fun_if.then_in(v_8) -> eval_test_fun_while.cond_in(v_8)
	eval_test_fun_if.else_in(v_8) -> eval_test_fun_while.cond_in(v_8)

The termination graph of problem 7 contains 1 nontrivial SCC:
8:	eval_test_fun_while.cond_in(v_8) -> eval_test_fun_if.then_in(v_8)
	eval_test_fun_while.cond_in(v_8) -> eval_test_fun_if.else_in(v_8)
	eval_test_fun_if.then_in(v_8) -> eval_test_fun_while.cond_in(v_8)
	eval_test_fun_if.else_in(v_8) -> eval_test_fun_while.cond_in(v_8)

By chaining the rule eval_test_fun_while.cond_in(v_8) -> eval_test_fun_if.then_in(v_8) with all rule in problem 8, the following new rules are obtained:
	eval_test_fun_while.cond_in(v_8) -> eval_test_fun_while.cond_in(v_8)
We thus obtain the following problem:
9:	eval_test_fun_while.cond_in(v_8) -> eval_test_fun_if.else_in(v_8)
	eval_test_fun_if.then_in(v_8) -> eval_test_fun_while.cond_in(v_8)
	eval_test_fun_if.else_in(v_8) -> eval_test_fun_while.cond_in(v_8)
	eval_test_fun_while.cond_in(v_8) -> eval_test_fun_while.cond_in(v_8)

The termination graph of problem 9 contains 1 nontrivial SCC:
10:	eval_test_fun_while.cond_in(v_8) -> eval_test_fun_if.else_in(v_8)
	eval_test_fun_if.else_in(v_8) -> eval_test_fun_while.cond_in(v_8)
	eval_test_fun_while.cond_in(v_8) -> eval_test_fun_while.cond_in(v_8)

By chaining the rule eval_test_fun_while.cond_in(v_8) -> eval_test_fun_if.else_in(v_8) with all rule in problem 10, the following new rules are obtained:
	eval_test_fun_while.cond_in(v_8) -> eval_test_fun_while.cond_in(v_8)
We thus obtain the following problem:
11:	eval_test_fun_if.else_in(v_8) -> eval_test_fun_while.cond_in(v_8)
	eval_test_fun_while.cond_in(v_8) -> eval_test_fun_while.cond_in(v_8)
	eval_test_fun_while.cond_in(v_8) -> eval_test_fun_while.cond_in(v_8)

The termination graph of problem 11 contains 1 nontrivial SCC:
12:	eval_test_fun_while.cond_in(v_8) -> eval_test_fun_while.cond_in(v_8)
	eval_test_fun_while.cond_in(v_8) -> eval_test_fun_while.cond_in(v_8)

The following termination problem could not be handled:
eval_test_fun_while.cond_in(v_8) -> eval_test_fun_while.cond_in(v_8)
eval_test_fun_while.cond_in(v_8) -> eval_test_fun_while.cond_in(v_8)

Time: 0.799 sec (SMT: 0.768 sec)
