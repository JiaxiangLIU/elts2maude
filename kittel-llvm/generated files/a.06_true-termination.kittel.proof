Initial termination problem:
1:	eval_main_start() -> eval_main_entry_in()
	eval_main_entry_in() -> eval_main_while.cond_in(nondef.0, nondef.1, nondef.2)
	eval_main_while.cond_in(v_call, v_y.0, v_z.0) -> eval_main_while.body_in(v_call, v_y.0, v_z.0) [ v_call > v_y.0 + v_z.0 ]
	eval_main_while.cond_in(v_call, v_y.0, v_z.0) -> eval_main_while.end_in() [ v_call <= v_y.0 + v_z.0 ]
	eval_main_while.body_in(v_call, v_y.0, v_z.0) -> eval_main_while.cond_in(v_call, v_y.0 + 1, v_z.0 + 1)
	eval_main_while.end_in() -> eval_main_stop()

The termination graph of problem 1 contains 1 nontrivial SCC:
2:	eval_main_while.cond_in(v_call, v_y.0, v_z.0) -> eval_main_while.body_in(v_call, v_y.0, v_z.0) [ v_call > v_y.0 + v_z.0 ]
	eval_main_while.body_in(v_call, v_y.0, v_z.0) -> eval_main_while.cond_in(v_call, v_y.0 + 1, v_z.0 + 1)

A polynomial interpretation with
	Pol(eval_main_while.cond_in) = X_1 - X_2 - X_3
	Pol(eval_main_while.body_in) = X_1 - X_2 - X_3 - 1
removes the following rule from problem 2:
	eval_main_while.cond_in(v_call, v_y.0, v_z.0) -> eval_main_while.body_in(v_call, v_y.0, v_z.0) [ v_call > v_y.0 + v_z.0 ]
We thus obtain the following problem:
3:	eval_main_while.body_in(v_call, v_y.0, v_z.0) -> eval_main_while.cond_in(v_call, v_y.0 + 1, v_z.0 + 1)

The termination graph of problem 3 contains no nontrivial SCC.

Termination successfully shown!

Time: 0.190 sec (SMT: 0.187 sec)
