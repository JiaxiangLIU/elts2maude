Initial termination problem:
1:	eval_le_start(v_x, v_y) -> eval_le_entry_in(v_x, v_y)
	eval_le_entry_in(v_x, v_y) -> eval_le_if.then_in(v_x, v_y) [ v_x > 0 /\ v_y > 0 ]
	eval_le_entry_in(v_x, v_y) -> eval_le_if.else_in(v_x) [ v_x <= 0 ]
	eval_le_entry_in(v_x, v_y) -> eval_le_if.else_in(v_x) [ v_y <= 0 ]
	eval_le_if.then_in(v_x, v_y) -> eval_le_start(v_x - 1, v_y - 1)
	eval_le_if.then_in(v_x, v_y) -> eval_le_return_in()
	eval_le_if.else_in(v_x) -> eval_le_return_in() [ v_x < 0 ]
	eval_le_if.else_in(v_x) -> eval_le_return_in() [ v_x > 0 ]
	eval_le_if.else_in(v_x) -> eval_le_return_in() [ v_x = 0 ]
	eval_le_return_in() -> eval_le_stop()
	eval_main_start() -> eval_main_stop()

The termination graph of problem 1 contains 1 nontrivial SCC:
2:	eval_le_start(v_x, v_y) -> eval_le_entry_in(v_x, v_y)
	eval_le_entry_in(v_x, v_y) -> eval_le_if.then_in(v_x, v_y) [ v_x > 0 /\ v_y > 0 ]
	eval_le_if.then_in(v_x, v_y) -> eval_le_start(v_x - 1, v_y - 1)

A polynomial interpretation with
	Pol(eval_le_start) = 3*X_2 - 1
	Pol(eval_le_entry_in) = 3*X_2 - 2
	Pol(eval_le_if.then_in) = 3*X_2 - 3
removes the following rule from problem 2:
	eval_le_entry_in(v_x, v_y) -> eval_le_if.then_in(v_x, v_y) [ v_x > 0 /\ v_y > 0 ]
We thus obtain the following problem:
3:	eval_le_start(v_x, v_y) -> eval_le_entry_in(v_x, v_y)
	eval_le_if.then_in(v_x, v_y) -> eval_le_start(v_x - 1, v_y - 1)

The termination graph of problem 3 contains no nontrivial SCC.

Termination successfully shown!

Time: 0.372 sec (SMT: 0.366 sec)
