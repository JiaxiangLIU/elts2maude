Initial termination problem:
1:	eval_main_start() -> eval_main_entry_in()
	eval_main_entry_in() -> eval_main_while.cond_in(nondef.2, nondef.3, nondef.0, nondef.1)
	eval_main_while.cond_in(v_call2, v_call3, v_i.0, v_j.0) -> eval_main_while.body_in(v_call2, v_call3, v_i.0, v_j.0) [ v_i.0 < v_call2 ]
	eval_main_while.cond_in(v_call2, v_call3, v_i.0, v_j.0) -> eval_main_while.body_in(v_call2, v_call3, v_i.0, v_j.0) [ v_j.0 < v_call3 ]
	eval_main_while.cond_in(v_call2, v_call3, v_i.0, v_j.0) -> eval_main_while.end_in() [ v_i.0 >= v_call2 /\ v_j.0 >= v_call3 ]
	eval_main_while.body_in(v_call2, v_call3, v_i.0, v_j.0) -> eval_main_while.cond_in(v_call2, v_call3, v_i.0 + 1, v_j.0 + 1)
	eval_main_while.end_in() -> eval_main_stop()

The termination graph of problem 1 contains 1 nontrivial SCC:
2:	eval_main_while.cond_in(v_call2, v_call3, v_i.0, v_j.0) -> eval_main_while.body_in(v_call2, v_call3, v_i.0, v_j.0) [ v_i.0 < v_call2 ]
	eval_main_while.cond_in(v_call2, v_call3, v_i.0, v_j.0) -> eval_main_while.body_in(v_call2, v_call3, v_i.0, v_j.0) [ v_j.0 < v_call3 ]
	eval_main_while.body_in(v_call2, v_call3, v_i.0, v_j.0) -> eval_main_while.cond_in(v_call2, v_call3, v_i.0 + 1, v_j.0 + 1)

A polynomial interpretation with
	Pol(eval_main_while.cond_in) = X_2 - X_4 + 1
	Pol(eval_main_while.body_in) = X_2 - X_4
removes the following rule from problem 2:
	eval_main_while.cond_in(v_call2, v_call3, v_i.0, v_j.0) -> eval_main_while.body_in(v_call2, v_call3, v_i.0, v_j.0) [ v_j.0 < v_call3 ]
We thus obtain the following problem:
3:	eval_main_while.cond_in(v_call2, v_call3, v_i.0, v_j.0) -> eval_main_while.body_in(v_call2, v_call3, v_i.0, v_j.0) [ v_i.0 < v_call2 ]
	eval_main_while.body_in(v_call2, v_call3, v_i.0, v_j.0) -> eval_main_while.cond_in(v_call2, v_call3, v_i.0 + 1, v_j.0 + 1)

The termination graph of problem 3 contains 1 nontrivial SCC:
4:	eval_main_while.cond_in(v_call2, v_call3, v_i.0, v_j.0) -> eval_main_while.body_in(v_call2, v_call3, v_i.0, v_j.0) [ v_i.0 < v_call2 ]
	eval_main_while.body_in(v_call2, v_call3, v_i.0, v_j.0) -> eval_main_while.cond_in(v_call2, v_call3, v_i.0 + 1, v_j.0 + 1)

A polynomial interpretation with
	Pol(eval_main_while.cond_in) = 2*X_1 - 2*X_3 + 1
	Pol(eval_main_while.body_in) = 2*X_1 - 2*X_3
removes the following rule from problem 4:
	eval_main_while.cond_in(v_call2, v_call3, v_i.0, v_j.0) -> eval_main_while.body_in(v_call2, v_call3, v_i.0, v_j.0) [ v_i.0 < v_call2 ]
We thus obtain the following problem:
5:	eval_main_while.body_in(v_call2, v_call3, v_i.0, v_j.0) -> eval_main_while.cond_in(v_call2, v_call3, v_i.0 + 1, v_j.0 + 1)

The termination graph of problem 5 contains no nontrivial SCC.

Termination successfully shown!

Time: 0.256 sec (SMT: 0.250 sec)
