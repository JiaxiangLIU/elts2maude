Initial termination problem:
1:	eval_parts_start(v_p, v_q) -> eval_parts_entry_in(v_p, v_q)
	eval_parts_entry_in(v_p, v_q) -> eval_parts_return_in() [ v_p <= 0 ]
	eval_parts_entry_in(v_p, v_q) -> eval_parts_if.else_in(v_p, v_q) [ v_p > 0 ]
	eval_parts_if.else_in(v_p, v_q) -> eval_parts_return_in() [ v_q <= 0 ]
	eval_parts_if.else_in(v_p, v_q) -> eval_parts_if.else.3_in(v_p, v_q) [ v_q > 0 ]
	eval_parts_if.else.3_in(v_p, v_q) -> eval_parts_if.then.5_in(v_p, v_q) [ v_q > v_p ]
	eval_parts_if.else.3_in(v_p, v_q) -> eval_parts_if.else.6_in(v_p, v_q) [ v_q <= v_p ]
	eval_parts_if.then.5_in(v_p, v_q) -> eval_parts_start(v_p, v_p)
	eval_parts_if.then.5_in(v_p, v_q) -> eval_parts_return_in()
	eval_parts_if.else.6_in(v_p, v_q) -> eval_parts_start(v_p - v_q, v_q)
	eval_parts_if.else.6_in(v_p, v_q) -> eval_parts_start(v_p, v_q - 1)
	eval_parts_if.else.6_in(v_p, v_q) -> eval_parts_return_in()
	eval_parts_return_in() -> eval_parts_stop()
	eval_main_start() -> eval_main_entry_in()
	eval_main_entry_in() -> eval_main_for.end.13_in()
	eval_main_entry_in() -> eval_main_if.end_in(nondef.0) [ nondef.0 >= 0 ]
	eval_main_if.end_in(v_call) -> eval_main_for.end.13_in()
	eval_main_if.end_in(v_call) -> eval_main_if.end.4_in(v_call)
	eval_main_if.end.4_in(v_call) -> eval_main_for.cond_in(v_call, 0)
	eval_main_for.cond_in(v_call, v_p.0) -> eval_main_for.cond.7_in(v_call, v_p.0, 0) [ v_p.0 <= v_call ]
	eval_main_for.cond_in(v_call, v_p.0) -> eval_main_for.end.13_in() [ v_p.0 > v_call ]
	eval_main_for.cond.7_in(v_call, v_p.0, v_q.0) -> eval_main_for.body.9_in(v_call, v_p.0, v_q.0) [ v_q.0 <= v_call ]
	eval_main_for.cond.7_in(v_call, v_p.0, v_q.0) -> eval_main_for.inc.11_in(v_call, v_p.0, v_q.0) [ v_q.0 > v_call ]
	eval_main_for.body.9_in(v_call, v_p.0, v_q.0) -> eval_main_for.cond.7_in(v_call, v_p.0, v_q.0 + 1)
	eval_main_for.inc.11_in(v_call, v_p.0, v_q.0) -> eval_main_for.cond_in(v_call, v_p.0 + 1)
	eval_main_for.end.13_in() -> eval_main_stop()

The termination graph of problem 1 contains 2 nontrivial SCCs:
2:	eval_parts_start(v_p, v_q) -> eval_parts_entry_in(v_p, v_q)
	eval_parts_entry_in(v_p, v_q) -> eval_parts_if.else_in(v_p, v_q) [ v_p > 0 ]
	eval_parts_if.else_in(v_p, v_q) -> eval_parts_if.else.3_in(v_p, v_q) [ v_q > 0 ]
	eval_parts_if.else.3_in(v_p, v_q) -> eval_parts_if.then.5_in(v_p, v_q) [ v_q > v_p ]
	eval_parts_if.else.3_in(v_p, v_q) -> eval_parts_if.else.6_in(v_p, v_q) [ v_q <= v_p ]
	eval_parts_if.then.5_in(v_p, v_q) -> eval_parts_start(v_p, v_p)
	eval_parts_if.else.6_in(v_p, v_q) -> eval_parts_start(v_p - v_q, v_q)
	eval_parts_if.else.6_in(v_p, v_q) -> eval_parts_start(v_p, v_q - 1)

3:	eval_main_for.cond_in(v_call, v_p.0) -> eval_main_for.cond.7_in(v_call, v_p.0, 0) [ v_p.0 <= v_call ]
	eval_main_for.cond.7_in(v_call, v_p.0, v_q.0) -> eval_main_for.body.9_in(v_call, v_p.0, v_q.0) [ v_q.0 <= v_call ]
	eval_main_for.cond.7_in(v_call, v_p.0, v_q.0) -> eval_main_for.inc.11_in(v_call, v_p.0, v_q.0) [ v_q.0 > v_call ]
	eval_main_for.body.9_in(v_call, v_p.0, v_q.0) -> eval_main_for.cond.7_in(v_call, v_p.0, v_q.0 + 1)
	eval_main_for.inc.11_in(v_call, v_p.0, v_q.0) -> eval_main_for.cond_in(v_call, v_p.0 + 1)

By chaining the rule eval_parts_start(v_p, v_q) -> eval_parts_entry_in(v_p, v_q) with all rule in problem 2, the following new rules are obtained:
	eval_parts_start(v_p, v_q) -> eval_parts_if.else_in(v_p, v_q) [ v_p > 0 ]
We thus obtain the following problem:
4:	eval_parts_entry_in(v_p, v_q) -> eval_parts_if.else_in(v_p, v_q) [ v_p > 0 ]
	eval_parts_if.else_in(v_p, v_q) -> eval_parts_if.else.3_in(v_p, v_q) [ v_q > 0 ]
	eval_parts_if.else.3_in(v_p, v_q) -> eval_parts_if.then.5_in(v_p, v_q) [ v_q > v_p ]
	eval_parts_if.else.3_in(v_p, v_q) -> eval_parts_if.else.6_in(v_p, v_q) [ v_q <= v_p ]
	eval_parts_if.then.5_in(v_p, v_q) -> eval_parts_start(v_p, v_p)
	eval_parts_if.else.6_in(v_p, v_q) -> eval_parts_start(v_p - v_q, v_q)
	eval_parts_if.else.6_in(v_p, v_q) -> eval_parts_start(v_p, v_q - 1)
	eval_parts_start(v_p, v_q) -> eval_parts_if.else_in(v_p, v_q) [ v_p > 0 ]

The termination graph of problem 4 contains 1 nontrivial SCC:
5:	eval_parts_if.else_in(v_p, v_q) -> eval_parts_if.else.3_in(v_p, v_q) [ v_q > 0 ]
	eval_parts_if.else.3_in(v_p, v_q) -> eval_parts_if.then.5_in(v_p, v_q) [ v_q > v_p ]
	eval_parts_if.else.3_in(v_p, v_q) -> eval_parts_if.else.6_in(v_p, v_q) [ v_q <= v_p ]
	eval_parts_if.then.5_in(v_p, v_q) -> eval_parts_start(v_p, v_p)
	eval_parts_if.else.6_in(v_p, v_q) -> eval_parts_start(v_p - v_q, v_q)
	eval_parts_if.else.6_in(v_p, v_q) -> eval_parts_start(v_p, v_q - 1)
	eval_parts_start(v_p, v_q) -> eval_parts_if.else_in(v_p, v_q) [ v_p > 0 ]

By chaining the rule eval_parts_if.else_in(v_p, v_q) -> eval_parts_if.else.3_in(v_p, v_q) [ v_q > 0 ] with all rules in problem 5, the following new rules are obtained:
	eval_parts_if.else_in(v_p, v_q) -> eval_parts_if.then.5_in(v_p, v_q) [ v_q > 0 /\ v_q > v_p ]
	eval_parts_if.else_in(v_p, v_q) -> eval_parts_if.else.6_in(v_p, v_q) [ v_q > 0 /\ v_q <= v_p ]
We thus obtain the following problem:
6:	eval_parts_if.else.3_in(v_p, v_q) -> eval_parts_if.then.5_in(v_p, v_q) [ v_q > v_p ]
	eval_parts_if.else.3_in(v_p, v_q) -> eval_parts_if.else.6_in(v_p, v_q) [ v_q <= v_p ]
	eval_parts_if.then.5_in(v_p, v_q) -> eval_parts_start(v_p, v_p)
	eval_parts_if.else.6_in(v_p, v_q) -> eval_parts_start(v_p - v_q, v_q)
	eval_parts_if.else.6_in(v_p, v_q) -> eval_parts_start(v_p, v_q - 1)
	eval_parts_start(v_p, v_q) -> eval_parts_if.else_in(v_p, v_q) [ v_p > 0 ]
	eval_parts_if.else_in(v_p, v_q) -> eval_parts_if.then.5_in(v_p, v_q) [ v_q > 0 /\ v_q > v_p ]
	eval_parts_if.else_in(v_p, v_q) -> eval_parts_if.else.6_in(v_p, v_q) [ v_q > 0 /\ v_q <= v_p ]

The termination graph of problem 6 contains 1 nontrivial SCC:
7:	eval_parts_if.then.5_in(v_p, v_q) -> eval_parts_start(v_p, v_p)
	eval_parts_if.else.6_in(v_p, v_q) -> eval_parts_start(v_p - v_q, v_q)
	eval_parts_if.else.6_in(v_p, v_q) -> eval_parts_start(v_p, v_q - 1)
	eval_parts_start(v_p, v_q) -> eval_parts_if.else_in(v_p, v_q) [ v_p > 0 ]
	eval_parts_if.else_in(v_p, v_q) -> eval_parts_if.then.5_in(v_p, v_q) [ v_q > 0 /\ v_q > v_p ]
	eval_parts_if.else_in(v_p, v_q) -> eval_parts_if.else.6_in(v_p, v_q) [ v_q > 0 /\ v_q <= v_p ]

A polynomial interpretation with
	Pol(eval_parts_if.then.5_in) = 2*X_1 - 1
	Pol(eval_parts_start) = 2*X_2 - 2
	Pol(eval_parts_if.else.6_in) = 2*X_2 - 2
	Pol(eval_parts_if.else_in) = 2*X_2 - 2
removes the following rule from problem 7:
	eval_parts_if.else_in(v_p, v_q) -> eval_parts_if.then.5_in(v_p, v_q) [ v_q > 0 /\ v_q > v_p ]
We thus obtain the following problem:
8:	eval_parts_if.then.5_in(v_p, v_q) -> eval_parts_start(v_p, v_p)
	eval_parts_if.else.6_in(v_p, v_q) -> eval_parts_start(v_p - v_q, v_q)
	eval_parts_if.else.6_in(v_p, v_q) -> eval_parts_start(v_p, v_q - 1)
	eval_parts_start(v_p, v_q) -> eval_parts_if.else_in(v_p, v_q) [ v_p > 0 ]
	eval_parts_if.else_in(v_p, v_q) -> eval_parts_if.else.6_in(v_p, v_q) [ v_q > 0 /\ v_q <= v_p ]

The termination graph of problem 8 contains 1 nontrivial SCC:
9:	eval_parts_if.else.6_in(v_p, v_q) -> eval_parts_start(v_p - v_q, v_q)
	eval_parts_if.else.6_in(v_p, v_q) -> eval_parts_start(v_p, v_q - 1)
	eval_parts_start(v_p, v_q) -> eval_parts_if.else_in(v_p, v_q) [ v_p > 0 ]
	eval_parts_if.else_in(v_p, v_q) -> eval_parts_if.else.6_in(v_p, v_q) [ v_q > 0 /\ v_q <= v_p ]

A polynomial interpretation with
	Pol(eval_parts_if.else.6_in) = 2*X_1 + X_2 + X_2^2 - 5
	Pol(eval_parts_start) = 2*X_1 + 3*X_2 + X_2^2 - 6
	Pol(eval_parts_if.else_in) = 2*X_1 + 3*X_2 + X_2^2 - 6
removes the following rule from problem 9:
	eval_parts_if.else_in(v_p, v_q) -> eval_parts_if.else.6_in(v_p, v_q) [ v_q > 0 /\ v_q <= v_p ]
We thus obtain the following problem:
10:	eval_parts_if.else.6_in(v_p, v_q) -> eval_parts_start(v_p - v_q, v_q)
	eval_parts_if.else.6_in(v_p, v_q) -> eval_parts_start(v_p, v_q - 1)
	eval_parts_start(v_p, v_q) -> eval_parts_if.else_in(v_p, v_q) [ v_p > 0 ]

The termination graph of problem 10 contains no nontrivial SCC.

A polynomial interpretation with
	Pol(eval_main_for.cond_in) = X_1 - X_2
	Pol(eval_main_for.cond.7_in) = X_1 - X_2 - 1
	Pol(eval_main_for.body.9_in) = X_1 - X_2 - 1
	Pol(eval_main_for.inc.11_in) = X_1 - X_2 - 1
removes the following rule from problem 3:
	eval_main_for.cond_in(v_call, v_p.0) -> eval_main_for.cond.7_in(v_call, v_p.0, 0) [ v_p.0 <= v_call ]
We thus obtain the following problem:
11:	eval_main_for.cond.7_in(v_call, v_p.0, v_q.0) -> eval_main_for.body.9_in(v_call, v_p.0, v_q.0) [ v_q.0 <= v_call ]
	eval_main_for.cond.7_in(v_call, v_p.0, v_q.0) -> eval_main_for.inc.11_in(v_call, v_p.0, v_q.0) [ v_q.0 > v_call ]
	eval_main_for.body.9_in(v_call, v_p.0, v_q.0) -> eval_main_for.cond.7_in(v_call, v_p.0, v_q.0 + 1)
	eval_main_for.inc.11_in(v_call, v_p.0, v_q.0) -> eval_main_for.cond_in(v_call, v_p.0 + 1)

The termination graph of problem 11 contains 1 nontrivial SCC:
12:	eval_main_for.cond.7_in(v_call, v_p.0, v_q.0) -> eval_main_for.body.9_in(v_call, v_p.0, v_q.0) [ v_q.0 <= v_call ]
	eval_main_for.body.9_in(v_call, v_p.0, v_q.0) -> eval_main_for.cond.7_in(v_call, v_p.0, v_q.0 + 1)

A polynomial interpretation with
	Pol(eval_main_for.cond.7_in) = 2*X_1 - 2*X_3 + 1
	Pol(eval_main_for.body.9_in) = 2*X_1 - 2*X_3
removes the following rule from problem 12:
	eval_main_for.cond.7_in(v_call, v_p.0, v_q.0) -> eval_main_for.body.9_in(v_call, v_p.0, v_q.0) [ v_q.0 <= v_call ]
We thus obtain the following problem:
13:	eval_main_for.body.9_in(v_call, v_p.0, v_q.0) -> eval_main_for.cond.7_in(v_call, v_p.0, v_q.0 + 1)

The termination graph of problem 13 contains no nontrivial SCC.

Termination successfully shown!

Time: 1.185 sec (SMT: 1.140 sec)
