Initial termination problem:
1:	eval_test_fun_start(v_x, v_y) -> eval_test_fun_entry_in()
	eval_test_fun_entry_in() -> eval_test_fun_if.then_in()
	eval_test_fun_entry_in() -> eval_test_fun_if.end_in()
	eval_test_fun_if.then_in() -> eval_test_fun_return_in()
	eval_test_fun_if.end_in() -> eval_test_fun_while.cond_in(nondef.2)
	eval_test_fun_while.cond_in(v_6) -> eval_test_fun_while.body_in(v_6)
	eval_test_fun_while.cond_in(v_6) -> eval_test_fun_return_in()
	eval_test_fun_while.body_in(v_6) -> eval_test_fun_while.cond_in(v_6)
	eval_test_fun_return_in() -> eval_test_fun_stop()
	eval_main_start() -> eval_main_stop()

The termination graph of problem 1 contains 1 nontrivial SCC:
2:	eval_test_fun_while.cond_in(v_6) -> eval_test_fun_while.body_in(v_6)
	eval_test_fun_while.body_in(v_6) -> eval_test_fun_while.cond_in(v_6)

By chaining the rule eval_test_fun_while.cond_in(v_6) -> eval_test_fun_while.body_in(v_6) with all rule in problem 2, the following new rules are obtained:
	eval_test_fun_while.cond_in(v_6) -> eval_test_fun_while.cond_in(v_6)
We thus obtain the following problem:
3:	eval_test_fun_while.body_in(v_6) -> eval_test_fun_while.cond_in(v_6)
	eval_test_fun_while.cond_in(v_6) -> eval_test_fun_while.cond_in(v_6)

The termination graph of problem 3 contains 1 nontrivial SCC:
4:	eval_test_fun_while.cond_in(v_6) -> eval_test_fun_while.cond_in(v_6)

The following termination problem could not be handled:
eval_test_fun_while.cond_in(v_6) -> eval_test_fun_while.cond_in(v_6)

Time: 0.397 sec (SMT: 0.387 sec)
