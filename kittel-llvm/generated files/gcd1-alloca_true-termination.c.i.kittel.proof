Initial termination problem:
1:	eval_gcd_start(v_x, v_y) -> eval_gcd_entry_in()
	eval_gcd_entry_in() -> eval_gcd_if.then_in()
	eval_gcd_entry_in() -> eval_gcd_if.end_in()
	eval_gcd_if.then_in() -> eval_gcd_if.end_in()
	eval_gcd_if.end_in() -> eval_gcd_if.then.2_in()
	eval_gcd_if.end_in() -> eval_gcd_while.cond_in()
	eval_gcd_if.then.2_in() -> eval_gcd_while.cond_in()
	eval_gcd_while.cond_in() -> eval_gcd_while.body_in()
	eval_gcd_while.cond_in() -> eval_gcd_while.end.10_in()
	eval_gcd_while.body_in() -> eval_gcd_while.cond.6_in(nondef.6)
	eval_gcd_while.cond.6_in(v_12) -> eval_gcd_while.body.8_in(v_12)
	eval_gcd_while.cond.6_in(v_12) -> eval_gcd_while.end_in(v_12)
	eval_gcd_while.body.8_in(v_12) -> eval_gcd_while.cond.6_in(v_12)
	eval_gcd_while.end_in(v_12) -> eval_gcd_while.cond_in()
	eval_gcd_while.end.10_in() -> eval_gcd_stop()
	eval_main_start() -> eval_main_stop()

The termination graph of problem 1 contains 1 nontrivial SCC:
2:	eval_gcd_while.cond_in() -> eval_gcd_while.body_in()
	eval_gcd_while.body_in() -> eval_gcd_while.cond.6_in(nondef.6)
	eval_gcd_while.cond.6_in(v_12) -> eval_gcd_while.body.8_in(v_12)
	eval_gcd_while.cond.6_in(v_12) -> eval_gcd_while.end_in(v_12)
	eval_gcd_while.body.8_in(v_12) -> eval_gcd_while.cond.6_in(v_12)
	eval_gcd_while.end_in(v_12) -> eval_gcd_while.cond_in()

By chaining the rule eval_gcd_while.cond_in() -> eval_gcd_while.body_in() with all rule in problem 2, the following new rules are obtained:
	eval_gcd_while.cond_in() -> eval_gcd_while.cond.6_in(nondef.6)
We thus obtain the following problem:
3:	eval_gcd_while.body_in() -> eval_gcd_while.cond.6_in(nondef.6)
	eval_gcd_while.cond.6_in(v_12) -> eval_gcd_while.body.8_in(v_12)
	eval_gcd_while.cond.6_in(v_12) -> eval_gcd_while.end_in(v_12)
	eval_gcd_while.body.8_in(v_12) -> eval_gcd_while.cond.6_in(v_12)
	eval_gcd_while.end_in(v_12) -> eval_gcd_while.cond_in()
	eval_gcd_while.cond_in() -> eval_gcd_while.cond.6_in(nondef.6)

The termination graph of problem 3 contains 1 nontrivial SCC:
4:	eval_gcd_while.cond.6_in(v_12) -> eval_gcd_while.body.8_in(v_12)
	eval_gcd_while.cond.6_in(v_12) -> eval_gcd_while.end_in(v_12)
	eval_gcd_while.body.8_in(v_12) -> eval_gcd_while.cond.6_in(v_12)
	eval_gcd_while.end_in(v_12) -> eval_gcd_while.cond_in()
	eval_gcd_while.cond_in() -> eval_gcd_while.cond.6_in(nondef.6)

By chaining the rule eval_gcd_while.cond.6_in(v_12) -> eval_gcd_while.body.8_in(v_12) with all rule in problem 4, the following new rules are obtained:
	eval_gcd_while.cond.6_in(v_12) -> eval_gcd_while.cond.6_in(v_12)
We thus obtain the following problem:
5:	eval_gcd_while.cond.6_in(v_12) -> eval_gcd_while.end_in(v_12)
	eval_gcd_while.body.8_in(v_12) -> eval_gcd_while.cond.6_in(v_12)
	eval_gcd_while.end_in(v_12) -> eval_gcd_while.cond_in()
	eval_gcd_while.cond_in() -> eval_gcd_while.cond.6_in(nondef.6)
	eval_gcd_while.cond.6_in(v_12) -> eval_gcd_while.cond.6_in(v_12)

The termination graph of problem 5 contains 1 nontrivial SCC:
6:	eval_gcd_while.cond.6_in(v_12) -> eval_gcd_while.end_in(v_12)
	eval_gcd_while.end_in(v_12) -> eval_gcd_while.cond_in()
	eval_gcd_while.cond_in() -> eval_gcd_while.cond.6_in(nondef.6)
	eval_gcd_while.cond.6_in(v_12) -> eval_gcd_while.cond.6_in(v_12)

By chaining the rule eval_gcd_while.cond.6_in(v_12) -> eval_gcd_while.end_in(v_12) with all rule in problem 6, the following new rules are obtained:
	eval_gcd_while.cond.6_in(v_12) -> eval_gcd_while.cond_in()
We thus obtain the following problem:
7:	eval_gcd_while.end_in(v_12) -> eval_gcd_while.cond_in()
	eval_gcd_while.cond_in() -> eval_gcd_while.cond.6_in(nondef.6)
	eval_gcd_while.cond.6_in(v_12) -> eval_gcd_while.cond.6_in(v_12)
	eval_gcd_while.cond.6_in(v_12) -> eval_gcd_while.cond_in()

The termination graph of problem 7 contains 1 nontrivial SCC:
8:	eval_gcd_while.cond_in() -> eval_gcd_while.cond.6_in(nondef.6)
	eval_gcd_while.cond.6_in(v_12) -> eval_gcd_while.cond.6_in(v_12)
	eval_gcd_while.cond.6_in(v_12) -> eval_gcd_while.cond_in()

The following termination problem could not be handled:
eval_gcd_while.cond_in() -> eval_gcd_while.cond.6_in(nondef.6)
eval_gcd_while.cond.6_in(v_12) -> eval_gcd_while.cond.6_in(v_12)
eval_gcd_while.cond.6_in(v_12) -> eval_gcd_while.cond_in()

Time: 0.789 sec (SMT: 0.766 sec)
