Initial termination problem:
1:	eval_average_start(v_x, v_y) -> eval_average_entry_in(v_x, v_y)
	eval_average_entry_in(v_x, v_y) -> eval_average_if.then_in(v_x, v_y) [ v_x > 0 ]
	eval_average_entry_in(v_x, v_y) -> eval_average_if.else_in(v_x, v_y) [ v_x <= 0 ]
	eval_average_if.then_in(v_x, v_y) -> eval_average_start(v_x - 1, v_y + 1)
	eval_average_if.then_in(v_x, v_y) -> eval_average_return_in()
	eval_average_if.else_in(v_x, v_y) -> eval_average_if.then.2_in(v_x, v_y) [ v_y > 2 ]
	eval_average_if.else_in(v_x, v_y) -> eval_average_return_in() [ v_y <= 2 ]
	eval_average_if.then.2_in(v_x, v_y) -> eval_average_start(v_x + 1, v_y - 2)
	eval_average_if.then.2_in(v_x, v_y) -> eval_average_return_in()
	eval_average_return_in() -> eval_average_stop()
	eval_random_start() -> eval_random_stop()
	eval_main_start() -> eval_main_stop()

The termination graph of problem 1 contains 1 nontrivial SCC:
2:	eval_average_start(v_x, v_y) -> eval_average_entry_in(v_x, v_y)
	eval_average_entry_in(v_x, v_y) -> eval_average_if.then_in(v_x, v_y) [ v_x > 0 ]
	eval_average_entry_in(v_x, v_y) -> eval_average_if.else_in(v_x, v_y) [ v_x <= 0 ]
	eval_average_if.then_in(v_x, v_y) -> eval_average_start(v_x - 1, v_y + 1)
	eval_average_if.else_in(v_x, v_y) -> eval_average_if.then.2_in(v_x, v_y) [ v_y > 2 ]
	eval_average_if.then.2_in(v_x, v_y) -> eval_average_start(v_x + 1, v_y - 2)

By chaining the rule eval_average_start(v_x, v_y) -> eval_average_entry_in(v_x, v_y) with all rules in problem 2, the following new rules are obtained:
	eval_average_start(v_x, v_y) -> eval_average_if.then_in(v_x, v_y) [ v_x > 0 ]
	eval_average_start(v_x, v_y) -> eval_average_if.else_in(v_x, v_y) [ v_x <= 0 ]
We thus obtain the following problem:
3:	eval_average_entry_in(v_x, v_y) -> eval_average_if.then_in(v_x, v_y) [ v_x > 0 ]
	eval_average_entry_in(v_x, v_y) -> eval_average_if.else_in(v_x, v_y) [ v_x <= 0 ]
	eval_average_if.then_in(v_x, v_y) -> eval_average_start(v_x - 1, v_y + 1)
	eval_average_if.else_in(v_x, v_y) -> eval_average_if.then.2_in(v_x, v_y) [ v_y > 2 ]
	eval_average_if.then.2_in(v_x, v_y) -> eval_average_start(v_x + 1, v_y - 2)
	eval_average_start(v_x, v_y) -> eval_average_if.then_in(v_x, v_y) [ v_x > 0 ]
	eval_average_start(v_x, v_y) -> eval_average_if.else_in(v_x, v_y) [ v_x <= 0 ]

The termination graph of problem 3 contains 1 nontrivial SCC:
4:	eval_average_if.then_in(v_x, v_y) -> eval_average_start(v_x - 1, v_y + 1)
	eval_average_if.else_in(v_x, v_y) -> eval_average_if.then.2_in(v_x, v_y) [ v_y > 2 ]
	eval_average_if.then.2_in(v_x, v_y) -> eval_average_start(v_x + 1, v_y - 2)
	eval_average_start(v_x, v_y) -> eval_average_if.then_in(v_x, v_y) [ v_x > 0 ]
	eval_average_start(v_x, v_y) -> eval_average_if.else_in(v_x, v_y) [ v_x <= 0 ]

By chaining the rule eval_average_if.then_in(v_x, v_y) -> eval_average_start(v_x - 1, v_y + 1) with all rules in problem 4, the following new rules are obtained:
	eval_average_if.then_in(v_x, v_y) -> eval_average_if.then_in(v_x - 1, v_y + 1) [ v_x - 1 > 0 ]
	eval_average_if.then_in(v_x, v_y) -> eval_average_if.else_in(v_x - 1, v_y + 1) [ v_x - 1 <= 0 ]
We thus obtain the following problem:
5:	eval_average_if.else_in(v_x, v_y) -> eval_average_if.then.2_in(v_x, v_y) [ v_y > 2 ]
	eval_average_if.then.2_in(v_x, v_y) -> eval_average_start(v_x + 1, v_y - 2)
	eval_average_start(v_x, v_y) -> eval_average_if.then_in(v_x, v_y) [ v_x > 0 ]
	eval_average_start(v_x, v_y) -> eval_average_if.else_in(v_x, v_y) [ v_x <= 0 ]
	eval_average_if.then_in(v_x, v_y) -> eval_average_if.then_in(v_x - 1, v_y + 1) [ v_x - 1 > 0 ]
	eval_average_if.then_in(v_x, v_y) -> eval_average_if.else_in(v_x - 1, v_y + 1) [ v_x - 1 <= 0 ]

The termination graph of problem 5 contains 1 nontrivial SCC:
6:	eval_average_if.else_in(v_x, v_y) -> eval_average_if.then.2_in(v_x, v_y) [ v_y > 2 ]
	eval_average_if.then.2_in(v_x, v_y) -> eval_average_start(v_x + 1, v_y - 2)
	eval_average_start(v_x, v_y) -> eval_average_if.then_in(v_x, v_y) [ v_x > 0 ]
	eval_average_start(v_x, v_y) -> eval_average_if.else_in(v_x, v_y) [ v_x <= 0 ]
	eval_average_if.then_in(v_x, v_y) -> eval_average_if.then_in(v_x - 1, v_y + 1) [ v_x - 1 > 0 ]
	eval_average_if.then_in(v_x, v_y) -> eval_average_if.else_in(v_x - 1, v_y + 1) [ v_x - 1 <= 0 ]

A polynomial interpretation with
	Pol(eval_average_if.else_in) = X_1^2 - 1
	Pol(eval_average_if.then.2_in) = X_1^2 - 1
	Pol(eval_average_start) = -2*X_1 + X_1^2
	Pol(eval_average_if.then_in) = -3*X_1 + X_1^2 + 1
removes the following rule from problem 6:
	eval_average_start(v_x, v_y) -> eval_average_if.else_in(v_x, v_y) [ v_x <= 0 ]
We thus obtain the following problem:
7:	eval_average_if.else_in(v_x, v_y) -> eval_average_if.then.2_in(v_x, v_y) [ v_y > 2 ]
	eval_average_if.then.2_in(v_x, v_y) -> eval_average_start(v_x + 1, v_y - 2)
	eval_average_start(v_x, v_y) -> eval_average_if.then_in(v_x, v_y) [ v_x > 0 ]
	eval_average_if.then_in(v_x, v_y) -> eval_average_if.then_in(v_x - 1, v_y + 1) [ v_x - 1 > 0 ]
	eval_average_if.then_in(v_x, v_y) -> eval_average_if.else_in(v_x - 1, v_y + 1) [ v_x - 1 <= 0 ]

The termination graph of problem 7 contains 1 nontrivial SCC:
8:	eval_average_if.else_in(v_x, v_y) -> eval_average_if.then.2_in(v_x, v_y) [ v_y > 2 ]
	eval_average_if.then.2_in(v_x, v_y) -> eval_average_start(v_x + 1, v_y - 2)
	eval_average_start(v_x, v_y) -> eval_average_if.then_in(v_x, v_y) [ v_x > 0 ]
	eval_average_if.then_in(v_x, v_y) -> eval_average_if.then_in(v_x - 1, v_y + 1) [ v_x - 1 > 0 ]
	eval_average_if.then_in(v_x, v_y) -> eval_average_if.else_in(v_x - 1, v_y + 1) [ v_x - 1 <= 0 ]

A polynomial interpretation with
	Pol(eval_average_if.else_in) = 2*X_1 - 2
	Pol(eval_average_if.then.2_in) = 2*X_1 - 2
	Pol(eval_average_start) = 2*X_1 - 4
	Pol(eval_average_if.then_in) = 2*X_1 - 4
removes the following rule from problem 8:
	eval_average_if.then_in(v_x, v_y) -> eval_average_if.then_in(v_x - 1, v_y + 1) [ v_x - 1 > 0 ]
We thus obtain the following problem:
9:	eval_average_if.else_in(v_x, v_y) -> eval_average_if.then.2_in(v_x, v_y) [ v_y > 2 ]
	eval_average_if.then.2_in(v_x, v_y) -> eval_average_start(v_x + 1, v_y - 2)
	eval_average_start(v_x, v_y) -> eval_average_if.then_in(v_x, v_y) [ v_x > 0 ]
	eval_average_if.then_in(v_x, v_y) -> eval_average_if.else_in(v_x - 1, v_y + 1) [ v_x - 1 <= 0 ]

The termination graph of problem 9 contains 1 nontrivial SCC:
10:	eval_average_if.else_in(v_x, v_y) -> eval_average_if.then.2_in(v_x, v_y) [ v_y > 2 ]
	eval_average_if.then.2_in(v_x, v_y) -> eval_average_start(v_x + 1, v_y - 2)
	eval_average_start(v_x, v_y) -> eval_average_if.then_in(v_x, v_y) [ v_x > 0 ]
	eval_average_if.then_in(v_x, v_y) -> eval_average_if.else_in(v_x - 1, v_y + 1) [ v_x - 1 <= 0 ]

A polynomial interpretation with
	Pol(eval_average_if.else_in) = X_2 - 1
	Pol(eval_average_if.then.2_in) = X_2 - 2
	Pol(eval_average_start) = X_2
	Pol(eval_average_if.then_in) = X_2
removes the following rule from problem 10:
	eval_average_if.else_in(v_x, v_y) -> eval_average_if.then.2_in(v_x, v_y) [ v_y > 2 ]
We thus obtain the following problem:
11:	eval_average_if.then.2_in(v_x, v_y) -> eval_average_start(v_x + 1, v_y - 2)
	eval_average_start(v_x, v_y) -> eval_average_if.then_in(v_x, v_y) [ v_x > 0 ]
	eval_average_if.then_in(v_x, v_y) -> eval_average_if.else_in(v_x - 1, v_y + 1) [ v_x - 1 <= 0 ]

The termination graph of problem 11 contains no nontrivial SCC.

Termination successfully shown!

Time: 0.692 sec (SMT: 0.662 sec)
