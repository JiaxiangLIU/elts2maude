Initial termination problem:
1:	eval_mlog_start(v_x) -> eval_mlog_entry_in(v_x)
	eval_mlog_entry_in(v_x) -> eval_mlog_while.cond_in(v_x)
	eval_mlog_while.cond_in(v_x.addr.0) -> eval_mlog_while.body_in(v_x.addr.0) [ v_x.addr.0 > 1 ]
	eval_mlog_while.cond_in(v_x.addr.0) -> eval_mlog_while.end_in() [ v_x.addr.0 <= 1 ]
	eval_mlog_while.body_in(v_x.addr.0) -> eval_mlog_while.cond_in(0) [ v_x.addr.0 = 0 ]
	eval_mlog_while.body_in(v_x.addr.0) -> eval_mlog_while.cond_in(nondef.0) [ v_x.addr.0 > 0 /\ nondef.0 >= 0 /\ nondef.0 < v_x.addr.0 ]
	eval_mlog_while.body_in(v_x.addr.0) -> eval_mlog_while.cond_in(nondef.0) [ v_x.addr.0 < 0 /\ nondef.0 <= 0 /\ nondef.0 > v_x.addr.0 ]
	eval_mlog_while.end_in() -> eval_mlog_stop()
	eval_main_start() -> eval_main_stop()

The termination graph of problem 1 contains 1 nontrivial SCC:
2:	eval_mlog_while.cond_in(v_x.addr.0) -> eval_mlog_while.body_in(v_x.addr.0) [ v_x.addr.0 > 1 ]
	eval_mlog_while.body_in(v_x.addr.0) -> eval_mlog_while.cond_in(nondef.0) [ v_x.addr.0 > 0 /\ nondef.0 >= 0 /\ nondef.0 < v_x.addr.0 ]

A polynomial interpretation with
	Pol(eval_mlog_while.cond_in) = 2*X_1 - 3
	Pol(eval_mlog_while.body_in) = 2*X_1 - 4
removes the following rule from problem 2:
	eval_mlog_while.cond_in(v_x.addr.0) -> eval_mlog_while.body_in(v_x.addr.0) [ v_x.addr.0 > 1 ]
We thus obtain the following problem:
3:	eval_mlog_while.body_in(v_x.addr.0) -> eval_mlog_while.cond_in(nondef.0) [ v_x.addr.0 > 0 /\ nondef.0 >= 0 /\ nondef.0 < v_x.addr.0 ]

The termination graph of problem 3 contains no nontrivial SCC.

Termination successfully shown!

Time: 0.313 sec (SMT: 0.308 sec)
