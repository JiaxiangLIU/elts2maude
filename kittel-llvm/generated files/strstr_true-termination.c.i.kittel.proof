Initial termination problem:
1:	eval_strlen_start() -> eval_strlen_entry_in()
	eval_strlen_entry_in() -> eval_strlen_for.cond_in()
	eval_strlen_entry_in() -> eval_strlen_return_in()
	eval_strlen_for.cond_in() -> eval_strlen_for.body_in()
	eval_strlen_for.cond_in() -> eval_strlen_return_in()
	eval_strlen_for.body_in() -> eval_strlen_for.cond_in()
	eval_strlen_return_in() -> eval_strlen_stop()
	eval_memcmp_start(v_count) -> eval_memcmp_entry_in(v_count)
	eval_memcmp_entry_in(v_count) -> eval_memcmp_while.cond_in(v_count + 1)
	eval_memcmp_while.cond_in(v_count.addr.0) -> eval_memcmp_while.body_in(v_count.addr.0, v_count.addr.0 - 1) [ v_count.addr.0 - 1 < 0 ]
	eval_memcmp_while.cond_in(v_count.addr.0) -> eval_memcmp_while.body_in(v_count.addr.0, v_count.addr.0 - 1) [ v_count.addr.0 - 1 > 0 ]
	eval_memcmp_while.cond_in(v_count.addr.0) -> eval_memcmp_return_in() [ v_count.addr.0 - 1 = 0 ]
	eval_memcmp_while.body_in(v_count.addr.0, v_dec) -> eval_memcmp_return_in() [ nondef.0 - nondef.1 < 0 ]
	eval_memcmp_while.body_in(v_count.addr.0, v_dec) -> eval_memcmp_return_in() [ nondef.0 - nondef.1 > 0 ]
	eval_memcmp_while.body_in(v_count.addr.0, v_dec) -> eval_memcmp_if.end_in(v_count.addr.0, v_dec) [ nondef.0 - nondef.1 = 0 ]
	eval_memcmp_if.end_in(v_count.addr.0, v_dec) -> eval_memcmp_while.cond_in(v_dec)
	eval_memcmp_return_in() -> eval_memcmp_stop()
	eval_strstr_start() -> eval_strstr_entry_in()
	eval_strstr_entry_in() -> eval_strstr_if.end_in(nondef.0, nondef.1) [ nondef.0 < 0 ]
	eval_strstr_entry_in() -> eval_strstr_if.end_in(nondef.0, nondef.1) [ nondef.0 > 0 ]
	eval_strstr_entry_in() -> eval_strstr_return_in()
	eval_strstr_if.end_in(v_call, v_call1) -> eval_strstr_return_in() [ v_call > v_call1 ]
	eval_strstr_if.end_in(v_call, v_call1) -> eval_strstr_if.end.3_in(v_call, v_call1) [ v_call <= v_call1 ]
	eval_strstr_if.end.3_in(v_call, v_call1) -> eval_strstr_for.cond_in(v_call1 - v_call + 1)
	eval_strstr_for.cond_in(v_i.0) -> eval_strstr_for.body_in(v_i.0) [ v_i.0 < 0 ]
	eval_strstr_for.cond_in(v_i.0) -> eval_strstr_for.body_in(v_i.0) [ v_i.0 > 0 ]
	eval_strstr_for.cond_in(v_i.0) -> eval_strstr_return_in() [ v_i.0 = 0 ]
	eval_strstr_for.body_in(v_i.0) -> eval_strstr_land.lhs.true_in(v_i.0)
	eval_strstr_for.body_in(v_i.0) -> eval_strstr_if.end.11_in(v_i.0)
	eval_strstr_land.lhs.true_in(v_i.0) -> eval_strstr_if.end.11_in(v_i.0)
	eval_strstr_land.lhs.true_in(v_i.0) -> eval_strstr_return_in()
	eval_strstr_if.end.11_in(v_i.0) -> eval_strstr_for.cond_in(v_i.0 - 1)
	eval_strstr_return_in() -> eval_strstr_stop()
	eval_main_start() -> eval_main_stop()

The termination graph of problem 1 contains 3 nontrivial SCCs:
2:	eval_strlen_for.cond_in() -> eval_strlen_for.body_in()
	eval_strlen_for.body_in() -> eval_strlen_for.cond_in()

3:	eval_memcmp_while.cond_in(v_count.addr.0) -> eval_memcmp_while.body_in(v_count.addr.0, v_count.addr.0 - 1) [ v_count.addr.0 - 1 < 0 ]
	eval_memcmp_while.cond_in(v_count.addr.0) -> eval_memcmp_while.body_in(v_count.addr.0, v_count.addr.0 - 1) [ v_count.addr.0 - 1 > 0 ]
	eval_memcmp_while.body_in(v_count.addr.0, v_dec) -> eval_memcmp_if.end_in(v_count.addr.0, v_dec) [ nondef.0 - nondef.1 = 0 ]
	eval_memcmp_if.end_in(v_count.addr.0, v_dec) -> eval_memcmp_while.cond_in(v_dec)

4:	eval_strstr_for.cond_in(v_i.0) -> eval_strstr_for.body_in(v_i.0) [ v_i.0 < 0 ]
	eval_strstr_for.cond_in(v_i.0) -> eval_strstr_for.body_in(v_i.0) [ v_i.0 > 0 ]
	eval_strstr_for.body_in(v_i.0) -> eval_strstr_land.lhs.true_in(v_i.0)
	eval_strstr_for.body_in(v_i.0) -> eval_strstr_if.end.11_in(v_i.0)
	eval_strstr_land.lhs.true_in(v_i.0) -> eval_strstr_if.end.11_in(v_i.0)
	eval_strstr_if.end.11_in(v_i.0) -> eval_strstr_for.cond_in(v_i.0 - 1)

By chaining the rule eval_strlen_for.cond_in() -> eval_strlen_for.body_in() with all rule in problem 2, the following new rules are obtained:
	eval_strlen_for.cond_in() -> eval_strlen_for.cond_in()
We thus obtain the following problem:
5:	eval_strlen_for.body_in() -> eval_strlen_for.cond_in()
	eval_strlen_for.cond_in() -> eval_strlen_for.cond_in()

The termination graph of problem 5 contains 1 nontrivial SCC:
6:	eval_strlen_for.cond_in() -> eval_strlen_for.cond_in()

The following termination problem could not be handled:
eval_strlen_for.cond_in() -> eval_strlen_for.cond_in()

Time: 1.277 sec (SMT: 1.235 sec)
