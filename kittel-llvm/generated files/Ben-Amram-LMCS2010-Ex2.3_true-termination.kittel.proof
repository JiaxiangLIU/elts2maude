Initial termination problem:
1:	eval_main_start() -> eval_main_entry_in()
	eval_main_entry_in() -> eval_main_while.cond_in(nondef.1, nondef.0, nondef.2)
	eval_main_while.cond_in(v_y.0, v_x.0, v_z.0) -> eval_main_while.body_in(v_y.0, v_x.0, v_z.0) [ v_x.0 > 0 /\ v_y.0 > 0 /\ v_z.0 > 0 ]
	eval_main_while.cond_in(v_y.0, v_x.0, v_z.0) -> eval_main_while.end_in() [ v_x.0 <= 0 ]
	eval_main_while.cond_in(v_y.0, v_x.0, v_z.0) -> eval_main_while.end_in() [ v_y.0 <= 0 ]
	eval_main_while.cond_in(v_y.0, v_x.0, v_z.0) -> eval_main_while.end_in() [ v_z.0 <= 0 ]
	eval_main_while.body_in(v_y.0, v_x.0, v_z.0) -> eval_main_if.then_in(v_y.0, v_x.0, v_z.0) [ v_y.0 > v_x.0 ]
	eval_main_while.body_in(v_y.0, v_x.0, v_z.0) -> eval_main_if.else_in(v_y.0, v_x.0, v_z.0) [ v_y.0 <= v_x.0 ]
	eval_main_if.then_in(v_y.0, v_x.0, v_z.0) -> eval_main_while.cond_in(v_z.0, nondef.3, nondef.3 - 1)
	eval_main_if.else_in(v_y.0, v_x.0, v_z.0) -> eval_main_while.cond_in(nondef.4 - 1, nondef.4, v_z.0 - 1)
	eval_main_while.end_in() -> eval_main_stop()

The termination graph of problem 1 contains 1 nontrivial SCC:
2:	eval_main_while.cond_in(v_y.0, v_x.0, v_z.0) -> eval_main_while.body_in(v_y.0, v_x.0, v_z.0) [ v_x.0 > 0 /\ v_y.0 > 0 /\ v_z.0 > 0 ]
	eval_main_while.body_in(v_y.0, v_x.0, v_z.0) -> eval_main_if.then_in(v_y.0, v_x.0, v_z.0) [ v_y.0 > v_x.0 ]
	eval_main_while.body_in(v_y.0, v_x.0, v_z.0) -> eval_main_if.else_in(v_y.0, v_x.0, v_z.0) [ v_y.0 <= v_x.0 ]
	eval_main_if.then_in(v_y.0, v_x.0, v_z.0) -> eval_main_while.cond_in(v_z.0, nondef.3, nondef.3 - 1)
	eval_main_if.else_in(v_y.0, v_x.0, v_z.0) -> eval_main_while.cond_in(nondef.4 - 1, nondef.4, v_z.0 - 1)

By chaining the rule eval_main_while.cond_in(v_y.0, v_x.0, v_z.0) -> eval_main_while.body_in(v_y.0, v_x.0, v_z.0) [ v_x.0 > 0 /\ v_y.0 > 0 /\ v_z.0 > 0 ] with all rules in problem 2, the following new rules are obtained:
	eval_main_while.cond_in(v_y.0, v_x.0, v_z.0) -> eval_main_if.then_in(v_y.0, v_x.0, v_z.0) [ v_x.0 > 0 /\ v_y.0 > 0 /\ v_z.0 > 0 /\ v_y.0 > v_x.0 ]
	eval_main_while.cond_in(v_y.0, v_x.0, v_z.0) -> eval_main_if.else_in(v_y.0, v_x.0, v_z.0) [ v_x.0 > 0 /\ v_y.0 > 0 /\ v_z.0 > 0 /\ v_y.0 <= v_x.0 ]
We thus obtain the following problem:
3:	eval_main_while.body_in(v_y.0, v_x.0, v_z.0) -> eval_main_if.then_in(v_y.0, v_x.0, v_z.0) [ v_y.0 > v_x.0 ]
	eval_main_while.body_in(v_y.0, v_x.0, v_z.0) -> eval_main_if.else_in(v_y.0, v_x.0, v_z.0) [ v_y.0 <= v_x.0 ]
	eval_main_if.then_in(v_y.0, v_x.0, v_z.0) -> eval_main_while.cond_in(v_z.0, nondef.3, nondef.3 - 1)
	eval_main_if.else_in(v_y.0, v_x.0, v_z.0) -> eval_main_while.cond_in(nondef.4 - 1, nondef.4, v_z.0 - 1)
	eval_main_while.cond_in(v_y.0, v_x.0, v_z.0) -> eval_main_if.then_in(v_y.0, v_x.0, v_z.0) [ v_x.0 > 0 /\ v_y.0 > 0 /\ v_z.0 > 0 /\ v_y.0 > v_x.0 ]
	eval_main_while.cond_in(v_y.0, v_x.0, v_z.0) -> eval_main_if.else_in(v_y.0, v_x.0, v_z.0) [ v_x.0 > 0 /\ v_y.0 > 0 /\ v_z.0 > 0 /\ v_y.0 <= v_x.0 ]

The termination graph of problem 3 contains 2 nontrivial SCCs:
4:	eval_main_if.else_in(v_y.0, v_x.0, v_z.0) -> eval_main_while.cond_in(nondef.4 - 1, nondef.4, v_z.0 - 1)
	eval_main_while.cond_in(v_y.0, v_x.0, v_z.0) -> eval_main_if.else_in(v_y.0, v_x.0, v_z.0) [ v_x.0 > 0 /\ v_y.0 > 0 /\ v_z.0 > 0 /\ v_y.0 <= v_x.0 ]

5:	eval_main_if.then_in(v_y.0, v_x.0, v_z.0) -> eval_main_while.cond_in(v_z.0, nondef.3, nondef.3 - 1)
	eval_main_while.cond_in(v_y.0, v_x.0, v_z.0) -> eval_main_if.then_in(v_y.0, v_x.0, v_z.0) [ v_x.0 > 0 /\ v_y.0 > 0 /\ v_z.0 > 0 /\ v_y.0 > v_x.0 ]

A polynomial interpretation with
	Pol(eval_main_if.else_in) = 2*X_3
	Pol(eval_main_while.cond_in) = 2*X_3 + 1
removes the following rule from problem 4:
	eval_main_while.cond_in(v_y.0, v_x.0, v_z.0) -> eval_main_if.else_in(v_y.0, v_x.0, v_z.0) [ v_x.0 > 0 /\ v_y.0 > 0 /\ v_z.0 > 0 /\ v_y.0 <= v_x.0 ]
We thus obtain the following problem:
6:	eval_main_if.else_in(v_y.0, v_x.0, v_z.0) -> eval_main_while.cond_in(nondef.4 - 1, nondef.4, v_z.0 - 1)

The termination graph of problem 6 contains no nontrivial SCC.

A polynomial interpretation with
	Pol(eval_main_if.then_in) = X_3
	Pol(eval_main_while.cond_in) = X_1 - X_2 + X_3
removes the following rule from problem 5:
	eval_main_while.cond_in(v_y.0, v_x.0, v_z.0) -> eval_main_if.then_in(v_y.0, v_x.0, v_z.0) [ v_x.0 > 0 /\ v_y.0 > 0 /\ v_z.0 > 0 /\ v_y.0 > v_x.0 ]
We thus obtain the following problem:
7:	eval_main_if.then_in(v_y.0, v_x.0, v_z.0) -> eval_main_while.cond_in(v_z.0, nondef.3, nondef.3 - 1)

The termination graph of problem 7 contains no nontrivial SCC.

Termination successfully shown!

Time: 0.612 sec (SMT: 0.587 sec)
