Initial termination problem:
1:	eval_fact_start(v_x) -> eval_fact_entry_in(v_x)
	eval_fact_entry_in(v_x) -> eval_fact_if.then_in(v_x) [ v_x > 1 ]
	eval_fact_entry_in(v_x) -> eval_fact_return_in() [ v_x <= 1 ]
	eval_fact_if.then_in(v_x) -> eval_fact_start(v_x - 1)
	eval_fact_if.then_in(v_x) -> eval_fact_return_in()
	eval_fact_return_in() -> eval_fact_stop()
	eval_main_start() -> eval_main_stop()

The termination graph of problem 1 contains 1 nontrivial SCC:
2:	eval_fact_start(v_x) -> eval_fact_entry_in(v_x)
	eval_fact_entry_in(v_x) -> eval_fact_if.then_in(v_x) [ v_x > 1 ]
	eval_fact_if.then_in(v_x) -> eval_fact_start(v_x - 1)

A polynomial interpretation with
	Pol(eval_fact_start) = 3*X_1 - 1
	Pol(eval_fact_entry_in) = 3*X_1 - 2
	Pol(eval_fact_if.then_in) = 3*X_1 - 3
removes the following rule from problem 2:
	eval_fact_entry_in(v_x) -> eval_fact_if.then_in(v_x) [ v_x > 1 ]
We thus obtain the following problem:
3:	eval_fact_start(v_x) -> eval_fact_entry_in(v_x)
	eval_fact_if.then_in(v_x) -> eval_fact_start(v_x - 1)

The termination graph of problem 3 contains no nontrivial SCC.

Termination successfully shown!

Time: 0.197 sec (SMT: 0.194 sec)
