Initial termination problem:
1:	eval_main_start() -> eval_main_entry_in()
	eval_main_entry_in() -> eval_main_while.cond_in(nondef.2, nondef.1, nondef.0)
	eval_main_while.cond_in(v_call2, v_y.0, v_x.0) -> eval_main_while.body_in(v_call2, v_y.0, v_x.0) [ v_x.0 > v_call2 ]
	eval_main_while.cond_in(v_call2, v_y.0, v_x.0) -> eval_main_while.body_in(v_call2, v_y.0, v_x.0) [ v_y.0 > v_call2 ]
	eval_main_while.cond_in(v_call2, v_y.0, v_x.0) -> eval_main_while.end_in() [ v_x.0 <= v_call2 /\ v_y.0 <= v_call2 ]
	eval_main_while.body_in(v_call2, v_y.0, v_x.0) -> eval_main_if.then_in(v_call2, v_y.0, v_x.0) [ v_x.0 > v_call2 ]
	eval_main_while.body_in(v_call2, v_y.0, v_x.0) -> eval_main_if.else_in(v_call2, v_y.0, v_x.0) [ v_x.0 <= v_call2 ]
	eval_main_if.then_in(v_call2, v_y.0, v_x.0) -> eval_main_if.end.9_in(v_call2, v_y.0, v_x.0, v_y.0, v_x.0 - 1)
	eval_main_if.else_in(v_call2, v_y.0, v_x.0) -> eval_main_if.end.9_in(v_call2, v_y.0, v_x.0, v_y.0 - 1, v_x.0) [ v_y.0 > v_call2 ]
	eval_main_if.else_in(v_call2, v_y.0, v_x.0) -> eval_main_if.end.9_in(v_call2, v_y.0, v_x.0, v_y.0, v_x.0) [ v_y.0 <= v_call2 ]
	eval_main_if.end.9_in(v_call2, v_y.0, v_x.0, v_y.2, v_x.1) -> eval_main_while.cond_in(v_call2, v_y.2, v_x.1)
	eval_main_while.end_in() -> eval_main_stop()

The termination graph of problem 1 contains 1 nontrivial SCC:
2:	eval_main_while.cond_in(v_call2, v_y.0, v_x.0) -> eval_main_while.body_in(v_call2, v_y.0, v_x.0) [ v_x.0 > v_call2 ]
	eval_main_while.cond_in(v_call2, v_y.0, v_x.0) -> eval_main_while.body_in(v_call2, v_y.0, v_x.0) [ v_y.0 > v_call2 ]
	eval_main_while.body_in(v_call2, v_y.0, v_x.0) -> eval_main_if.then_in(v_call2, v_y.0, v_x.0) [ v_x.0 > v_call2 ]
	eval_main_while.body_in(v_call2, v_y.0, v_x.0) -> eval_main_if.else_in(v_call2, v_y.0, v_x.0) [ v_x.0 <= v_call2 ]
	eval_main_if.then_in(v_call2, v_y.0, v_x.0) -> eval_main_if.end.9_in(v_call2, v_y.0, v_x.0, v_y.0, v_x.0 - 1)
	eval_main_if.else_in(v_call2, v_y.0, v_x.0) -> eval_main_if.end.9_in(v_call2, v_y.0, v_x.0, v_y.0 - 1, v_x.0) [ v_y.0 > v_call2 ]
	eval_main_if.else_in(v_call2, v_y.0, v_x.0) -> eval_main_if.end.9_in(v_call2, v_y.0, v_x.0, v_y.0, v_x.0) [ v_y.0 <= v_call2 ]
	eval_main_if.end.9_in(v_call2, v_y.0, v_x.0, v_y.2, v_x.1) -> eval_main_while.cond_in(v_call2, v_y.2, v_x.1)

A polynomial interpretation with
	Pol(eval_main_while.cond_in) = -2*X_1 + 2*X_2 - 2
	Pol(eval_main_while.body_in) = -2*X_1 + 2*X_2 - 2
	Pol(eval_main_if.then_in) = -2*X_1 + 2*X_2 - 2
	Pol(eval_main_if.else_in) = -2*X_1 + 2*X_2 - 2
	Pol(eval_main_if.end.9_in) = -2*X_1 + 2*X_4 - 2
removes the following rule from problem 2:
	eval_main_if.else_in(v_call2, v_y.0, v_x.0) -> eval_main_if.end.9_in(v_call2, v_y.0, v_x.0, v_y.0 - 1, v_x.0) [ v_y.0 > v_call2 ]
We thus obtain the following problem:
3:	eval_main_while.cond_in(v_call2, v_y.0, v_x.0) -> eval_main_while.body_in(v_call2, v_y.0, v_x.0) [ v_x.0 > v_call2 ]
	eval_main_while.cond_in(v_call2, v_y.0, v_x.0) -> eval_main_while.body_in(v_call2, v_y.0, v_x.0) [ v_y.0 > v_call2 ]
	eval_main_while.body_in(v_call2, v_y.0, v_x.0) -> eval_main_if.then_in(v_call2, v_y.0, v_x.0) [ v_x.0 > v_call2 ]
	eval_main_while.body_in(v_call2, v_y.0, v_x.0) -> eval_main_if.else_in(v_call2, v_y.0, v_x.0) [ v_x.0 <= v_call2 ]
	eval_main_if.then_in(v_call2, v_y.0, v_x.0) -> eval_main_if.end.9_in(v_call2, v_y.0, v_x.0, v_y.0, v_x.0 - 1)
	eval_main_if.else_in(v_call2, v_y.0, v_x.0) -> eval_main_if.end.9_in(v_call2, v_y.0, v_x.0, v_y.0, v_x.0) [ v_y.0 <= v_call2 ]
	eval_main_if.end.9_in(v_call2, v_y.0, v_x.0, v_y.2, v_x.1) -> eval_main_while.cond_in(v_call2, v_y.2, v_x.1)

The termination graph of problem 3 contains 1 nontrivial SCC:
4:	eval_main_while.cond_in(v_call2, v_y.0, v_x.0) -> eval_main_while.body_in(v_call2, v_y.0, v_x.0) [ v_x.0 > v_call2 ]
	eval_main_while.cond_in(v_call2, v_y.0, v_x.0) -> eval_main_while.body_in(v_call2, v_y.0, v_x.0) [ v_y.0 > v_call2 ]
	eval_main_while.body_in(v_call2, v_y.0, v_x.0) -> eval_main_if.then_in(v_call2, v_y.0, v_x.0) [ v_x.0 > v_call2 ]
	eval_main_while.body_in(v_call2, v_y.0, v_x.0) -> eval_main_if.else_in(v_call2, v_y.0, v_x.0) [ v_x.0 <= v_call2 ]
	eval_main_if.then_in(v_call2, v_y.0, v_x.0) -> eval_main_if.end.9_in(v_call2, v_y.0, v_x.0, v_y.0, v_x.0 - 1)
	eval_main_if.else_in(v_call2, v_y.0, v_x.0) -> eval_main_if.end.9_in(v_call2, v_y.0, v_x.0, v_y.0, v_x.0) [ v_y.0 <= v_call2 ]
	eval_main_if.end.9_in(v_call2, v_y.0, v_x.0, v_y.2, v_x.1) -> eval_main_while.cond_in(v_call2, v_y.2, v_x.1)

A polynomial interpretation with
	Pol(eval_main_while.cond_in) = -2*X_1 + 2*X_3 - 1
	Pol(eval_main_while.body_in) = -2*X_1 + 2*X_3 - 1
	Pol(eval_main_if.then_in) = -2*X_1 + 2*X_3 - 3
	Pol(eval_main_if.else_in) = -2*X_1 + 2*X_3 - 1
	Pol(eval_main_if.end.9_in) = -2*X_1 + 2*X_5 - 1
removes the following rule from problem 4:
	eval_main_while.body_in(v_call2, v_y.0, v_x.0) -> eval_main_if.then_in(v_call2, v_y.0, v_x.0) [ v_x.0 > v_call2 ]
We thus obtain the following problem:
5:	eval_main_while.cond_in(v_call2, v_y.0, v_x.0) -> eval_main_while.body_in(v_call2, v_y.0, v_x.0) [ v_x.0 > v_call2 ]
	eval_main_while.cond_in(v_call2, v_y.0, v_x.0) -> eval_main_while.body_in(v_call2, v_y.0, v_x.0) [ v_y.0 > v_call2 ]
	eval_main_while.body_in(v_call2, v_y.0, v_x.0) -> eval_main_if.else_in(v_call2, v_y.0, v_x.0) [ v_x.0 <= v_call2 ]
	eval_main_if.then_in(v_call2, v_y.0, v_x.0) -> eval_main_if.end.9_in(v_call2, v_y.0, v_x.0, v_y.0, v_x.0 - 1)
	eval_main_if.else_in(v_call2, v_y.0, v_x.0) -> eval_main_if.end.9_in(v_call2, v_y.0, v_x.0, v_y.0, v_x.0) [ v_y.0 <= v_call2 ]
	eval_main_if.end.9_in(v_call2, v_y.0, v_x.0, v_y.2, v_x.1) -> eval_main_while.cond_in(v_call2, v_y.2, v_x.1)

The termination graph of problem 5 contains 1 nontrivial SCC:
6:	eval_main_while.cond_in(v_call2, v_y.0, v_x.0) -> eval_main_while.body_in(v_call2, v_y.0, v_x.0) [ v_y.0 > v_call2 ]
	eval_main_while.body_in(v_call2, v_y.0, v_x.0) -> eval_main_if.else_in(v_call2, v_y.0, v_x.0) [ v_x.0 <= v_call2 ]
	eval_main_if.else_in(v_call2, v_y.0, v_x.0) -> eval_main_if.end.9_in(v_call2, v_y.0, v_x.0, v_y.0, v_x.0) [ v_y.0 <= v_call2 ]
	eval_main_if.end.9_in(v_call2, v_y.0, v_x.0, v_y.2, v_x.1) -> eval_main_while.cond_in(v_call2, v_y.2, v_x.1)

A polynomial interpretation with
	Pol(eval_main_while.cond_in) = 2*X_1 + 4*X_2 - 6*X_3 - 3
	Pol(eval_main_while.body_in) = 6*X_1 - 6*X_3
	Pol(eval_main_if.else_in) = 6*X_1 - 6*X_3 - 1
	Pol(eval_main_if.end.9_in) = 2*X_1 + 4*X_4 - 6*X_5 - 2
removes the following rule from problem 6:
	eval_main_while.body_in(v_call2, v_y.0, v_x.0) -> eval_main_if.else_in(v_call2, v_y.0, v_x.0) [ v_x.0 <= v_call2 ]
We thus obtain the following problem:
7:	eval_main_while.cond_in(v_call2, v_y.0, v_x.0) -> eval_main_while.body_in(v_call2, v_y.0, v_x.0) [ v_y.0 > v_call2 ]
	eval_main_if.else_in(v_call2, v_y.0, v_x.0) -> eval_main_if.end.9_in(v_call2, v_y.0, v_x.0, v_y.0, v_x.0) [ v_y.0 <= v_call2 ]
	eval_main_if.end.9_in(v_call2, v_y.0, v_x.0, v_y.2, v_x.1) -> eval_main_while.cond_in(v_call2, v_y.2, v_x.1)

The termination graph of problem 7 contains no nontrivial SCC.

Termination successfully shown!

Time: 0.454 sec (SMT: 0.441 sec)
