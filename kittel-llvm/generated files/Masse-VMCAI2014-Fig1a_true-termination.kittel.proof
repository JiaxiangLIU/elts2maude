Initial termination problem:
1:	eval_main_start() -> eval_main_entry_in()
	eval_main_entry_in() -> eval_main_while.cond_in(nondef.0, nondef.1)
	eval_main_while.cond_in(v_a.0, v_b.0) -> eval_main_while.body_in(v_a.0, v_b.0) [ v_a.0 >= 0 ]
	eval_main_while.cond_in(v_a.0, v_b.0) -> eval_main_while.end_in() [ v_a.0 < 0 ]
	eval_main_while.body_in(v_a.0, v_b.0) -> eval_main_while.cond_in(v_a.0 + v_b.0, -v_b.0 - 1) [ v_b.0 >= 0 ]
	eval_main_while.body_in(v_a.0, v_b.0) -> eval_main_while.cond_in(v_a.0 + v_b.0, -v_b.0) [ v_b.0 < 0 ]
	eval_main_while.end_in() -> eval_main_stop()

The termination graph of problem 1 contains 1 nontrivial SCC:
2:	eval_main_while.cond_in(v_a.0, v_b.0) -> eval_main_while.body_in(v_a.0, v_b.0) [ v_a.0 >= 0 ]
	eval_main_while.body_in(v_a.0, v_b.0) -> eval_main_while.cond_in(v_a.0 + v_b.0, -v_b.0 - 1) [ v_b.0 >= 0 ]
	eval_main_while.body_in(v_a.0, v_b.0) -> eval_main_while.cond_in(v_a.0 + v_b.0, -v_b.0) [ v_b.0 < 0 ]

By chaining the rule eval_main_while.cond_in(v_a.0, v_b.0) -> eval_main_while.body_in(v_a.0, v_b.0) [ v_a.0 >= 0 ] with all rules in problem 2, the following new rules are obtained:
	eval_main_while.cond_in(v_a.0, v_b.0) -> eval_main_while.cond_in(v_a.0 + v_b.0, -v_b.0 - 1) [ v_a.0 >= 0 /\ v_b.0 >= 0 ]
	eval_main_while.cond_in(v_a.0, v_b.0) -> eval_main_while.cond_in(v_a.0 + v_b.0, -v_b.0) [ v_a.0 >= 0 /\ v_b.0 < 0 ]
We thus obtain the following problem:
3:	eval_main_while.body_in(v_a.0, v_b.0) -> eval_main_while.cond_in(v_a.0 + v_b.0, -v_b.0 - 1) [ v_b.0 >= 0 ]
	eval_main_while.body_in(v_a.0, v_b.0) -> eval_main_while.cond_in(v_a.0 + v_b.0, -v_b.0) [ v_b.0 < 0 ]
	eval_main_while.cond_in(v_a.0, v_b.0) -> eval_main_while.cond_in(v_a.0 + v_b.0, -v_b.0 - 1) [ v_a.0 >= 0 /\ v_b.0 >= 0 ]
	eval_main_while.cond_in(v_a.0, v_b.0) -> eval_main_while.cond_in(v_a.0 + v_b.0, -v_b.0) [ v_a.0 >= 0 /\ v_b.0 < 0 ]

The termination graph of problem 3 contains 1 nontrivial SCC:
4:	eval_main_while.cond_in(v_a.0, v_b.0) -> eval_main_while.cond_in(v_a.0 + v_b.0, -v_b.0 - 1) [ v_a.0 >= 0 /\ v_b.0 >= 0 ]
	eval_main_while.cond_in(v_a.0, v_b.0) -> eval_main_while.cond_in(v_a.0 + v_b.0, -v_b.0) [ v_a.0 >= 0 /\ v_b.0 < 0 ]

A polynomial interpretation with
	Pol(eval_main_while.cond_in) = 2*X_1 + X_2
removes the following rule from problem 4:
	eval_main_while.cond_in(v_a.0, v_b.0) -> eval_main_while.cond_in(v_a.0 + v_b.0, -v_b.0 - 1) [ v_a.0 >= 0 /\ v_b.0 >= 0 ]
We thus obtain the following problem:
5:	eval_main_while.cond_in(v_a.0, v_b.0) -> eval_main_while.cond_in(v_a.0 + v_b.0, -v_b.0) [ v_a.0 >= 0 /\ v_b.0 < 0 ]

The termination graph of problem 5 contains no nontrivial SCC.

Termination successfully shown!

Time: 0.435 sec (SMT: 0.423 sec)
