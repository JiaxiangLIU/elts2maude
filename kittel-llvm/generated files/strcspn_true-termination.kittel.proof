Initial termination problem:
1:	eval_strcspn_start() -> eval_strcspn_entry_in()
	eval_strcspn_entry_in() -> eval_strcspn_for.cond_in()
	eval_strcspn_for.cond_in() -> eval_strcspn_for.body_in()
	eval_strcspn_for.cond_in() -> eval_strcspn_return_in()
	eval_strcspn_for.body_in() -> eval_strcspn_for.cond.1_in(nondef.1)
	eval_strcspn_for.cond.1_in(v_conv) -> eval_strcspn_for.body.3_in(v_conv)
	eval_strcspn_for.cond.1_in(v_conv) -> eval_strcspn_for.end_in(v_conv)
	eval_strcspn_for.body.3_in(v_conv) -> eval_strcspn_return_in()
	eval_strcspn_for.body.3_in(v_conv) -> eval_strcspn_for.inc_in(v_conv)
	eval_strcspn_for.inc_in(v_conv) -> eval_strcspn_for.cond.1_in(v_conv)
	eval_strcspn_for.end_in(v_conv) -> eval_strcspn_for.cond_in()
	eval_strcspn_return_in() -> eval_strcspn_stop()
	eval_main_start() -> eval_main_stop()

The termination graph of problem 1 contains 1 nontrivial SCC:
2:	eval_strcspn_for.cond_in() -> eval_strcspn_for.body_in()
	eval_strcspn_for.body_in() -> eval_strcspn_for.cond.1_in(nondef.1)
	eval_strcspn_for.cond.1_in(v_conv) -> eval_strcspn_for.body.3_in(v_conv)
	eval_strcspn_for.cond.1_in(v_conv) -> eval_strcspn_for.end_in(v_conv)
	eval_strcspn_for.body.3_in(v_conv) -> eval_strcspn_for.inc_in(v_conv)
	eval_strcspn_for.inc_in(v_conv) -> eval_strcspn_for.cond.1_in(v_conv)
	eval_strcspn_for.end_in(v_conv) -> eval_strcspn_for.cond_in()

By chaining the rule eval_strcspn_for.cond_in() -> eval_strcspn_for.body_in() with all rule in problem 2, the following new rules are obtained:
	eval_strcspn_for.cond_in() -> eval_strcspn_for.cond.1_in(nondef.1)
We thus obtain the following problem:
3:	eval_strcspn_for.body_in() -> eval_strcspn_for.cond.1_in(nondef.1)
	eval_strcspn_for.cond.1_in(v_conv) -> eval_strcspn_for.body.3_in(v_conv)
	eval_strcspn_for.cond.1_in(v_conv) -> eval_strcspn_for.end_in(v_conv)
	eval_strcspn_for.body.3_in(v_conv) -> eval_strcspn_for.inc_in(v_conv)
	eval_strcspn_for.inc_in(v_conv) -> eval_strcspn_for.cond.1_in(v_conv)
	eval_strcspn_for.end_in(v_conv) -> eval_strcspn_for.cond_in()
	eval_strcspn_for.cond_in() -> eval_strcspn_for.cond.1_in(nondef.1)

The termination graph of problem 3 contains 1 nontrivial SCC:
4:	eval_strcspn_for.cond.1_in(v_conv) -> eval_strcspn_for.body.3_in(v_conv)
	eval_strcspn_for.cond.1_in(v_conv) -> eval_strcspn_for.end_in(v_conv)
	eval_strcspn_for.body.3_in(v_conv) -> eval_strcspn_for.inc_in(v_conv)
	eval_strcspn_for.inc_in(v_conv) -> eval_strcspn_for.cond.1_in(v_conv)
	eval_strcspn_for.end_in(v_conv) -> eval_strcspn_for.cond_in()
	eval_strcspn_for.cond_in() -> eval_strcspn_for.cond.1_in(nondef.1)

By chaining the rule eval_strcspn_for.cond.1_in(v_conv) -> eval_strcspn_for.body.3_in(v_conv) with all rule in problem 4, the following new rules are obtained:
	eval_strcspn_for.cond.1_in(v_conv) -> eval_strcspn_for.inc_in(v_conv)
We thus obtain the following problem:
5:	eval_strcspn_for.cond.1_in(v_conv) -> eval_strcspn_for.end_in(v_conv)
	eval_strcspn_for.body.3_in(v_conv) -> eval_strcspn_for.inc_in(v_conv)
	eval_strcspn_for.inc_in(v_conv) -> eval_strcspn_for.cond.1_in(v_conv)
	eval_strcspn_for.end_in(v_conv) -> eval_strcspn_for.cond_in()
	eval_strcspn_for.cond_in() -> eval_strcspn_for.cond.1_in(nondef.1)
	eval_strcspn_for.cond.1_in(v_conv) -> eval_strcspn_for.inc_in(v_conv)

The termination graph of problem 5 contains 1 nontrivial SCC:
6:	eval_strcspn_for.cond.1_in(v_conv) -> eval_strcspn_for.end_in(v_conv)
	eval_strcspn_for.inc_in(v_conv) -> eval_strcspn_for.cond.1_in(v_conv)
	eval_strcspn_for.end_in(v_conv) -> eval_strcspn_for.cond_in()
	eval_strcspn_for.cond_in() -> eval_strcspn_for.cond.1_in(nondef.1)
	eval_strcspn_for.cond.1_in(v_conv) -> eval_strcspn_for.inc_in(v_conv)

By chaining the rule eval_strcspn_for.cond.1_in(v_conv) -> eval_strcspn_for.end_in(v_conv) with all rule in problem 6, the following new rules are obtained:
	eval_strcspn_for.cond.1_in(v_conv) -> eval_strcspn_for.cond_in()
We thus obtain the following problem:
7:	eval_strcspn_for.inc_in(v_conv) -> eval_strcspn_for.cond.1_in(v_conv)
	eval_strcspn_for.end_in(v_conv) -> eval_strcspn_for.cond_in()
	eval_strcspn_for.cond_in() -> eval_strcspn_for.cond.1_in(nondef.1)
	eval_strcspn_for.cond.1_in(v_conv) -> eval_strcspn_for.inc_in(v_conv)
	eval_strcspn_for.cond.1_in(v_conv) -> eval_strcspn_for.cond_in()

The termination graph of problem 7 contains 1 nontrivial SCC:
8:	eval_strcspn_for.inc_in(v_conv) -> eval_strcspn_for.cond.1_in(v_conv)
	eval_strcspn_for.cond_in() -> eval_strcspn_for.cond.1_in(nondef.1)
	eval_strcspn_for.cond.1_in(v_conv) -> eval_strcspn_for.inc_in(v_conv)
	eval_strcspn_for.cond.1_in(v_conv) -> eval_strcspn_for.cond_in()

By chaining the rule eval_strcspn_for.inc_in(v_conv) -> eval_strcspn_for.cond.1_in(v_conv) with all rules in problem 8, the following new rules are obtained:
	eval_strcspn_for.inc_in(v_conv) -> eval_strcspn_for.inc_in(v_conv)
	eval_strcspn_for.inc_in(v_conv) -> eval_strcspn_for.cond_in()
We thus obtain the following problem:
9:	eval_strcspn_for.cond_in() -> eval_strcspn_for.cond.1_in(nondef.1)
	eval_strcspn_for.cond.1_in(v_conv) -> eval_strcspn_for.inc_in(v_conv)
	eval_strcspn_for.cond.1_in(v_conv) -> eval_strcspn_for.cond_in()
	eval_strcspn_for.inc_in(v_conv) -> eval_strcspn_for.inc_in(v_conv)
	eval_strcspn_for.inc_in(v_conv) -> eval_strcspn_for.cond_in()

The termination graph of problem 9 contains 1 nontrivial SCC:
10:	eval_strcspn_for.cond_in() -> eval_strcspn_for.cond.1_in(nondef.1)
	eval_strcspn_for.cond.1_in(v_conv) -> eval_strcspn_for.inc_in(v_conv)
	eval_strcspn_for.cond.1_in(v_conv) -> eval_strcspn_for.cond_in()
	eval_strcspn_for.inc_in(v_conv) -> eval_strcspn_for.inc_in(v_conv)
	eval_strcspn_for.inc_in(v_conv) -> eval_strcspn_for.cond_in()

By chaining the rule eval_strcspn_for.cond_in() -> eval_strcspn_for.cond.1_in(nondef.1) with all rules in problem 10, the following new rules are obtained:
	eval_strcspn_for.cond_in() -> eval_strcspn_for.inc_in(nondef.1)
	eval_strcspn_for.cond_in() -> eval_strcspn_for.cond_in()
We thus obtain the following problem:
11:	eval_strcspn_for.cond.1_in(v_conv) -> eval_strcspn_for.inc_in(v_conv)
	eval_strcspn_for.cond.1_in(v_conv) -> eval_strcspn_for.cond_in()
	eval_strcspn_for.inc_in(v_conv) -> eval_strcspn_for.inc_in(v_conv)
	eval_strcspn_for.inc_in(v_conv) -> eval_strcspn_for.cond_in()
	eval_strcspn_for.cond_in() -> eval_strcspn_for.inc_in(nondef.1)
	eval_strcspn_for.cond_in() -> eval_strcspn_for.cond_in()

The termination graph of problem 11 contains 1 nontrivial SCC:
12:	eval_strcspn_for.inc_in(v_conv) -> eval_strcspn_for.inc_in(v_conv)
	eval_strcspn_for.inc_in(v_conv) -> eval_strcspn_for.cond_in()
	eval_strcspn_for.cond_in() -> eval_strcspn_for.inc_in(nondef.1)
	eval_strcspn_for.cond_in() -> eval_strcspn_for.cond_in()

The following termination problem could not be handled:
eval_strcspn_for.inc_in(v_conv) -> eval_strcspn_for.inc_in(v_conv)
eval_strcspn_for.inc_in(v_conv) -> eval_strcspn_for.cond_in()
eval_strcspn_for.cond_in() -> eval_strcspn_for.inc_in(nondef.1)
eval_strcspn_for.cond_in() -> eval_strcspn_for.cond_in()

Time: 0.960 sec (SMT: 0.927 sec)
