///*** 1_Ack ***///
eval_Ack_start(v_m, v_n) -> eval_Ack_entry_in(v_m, v_n)
eval_Ack_entry_in(v_m, v_n) -> eval_Ack_if.then_in() [ v_m = 0 ]
eval_Ack_entry_in(v_m, v_n) -> eval_Ack_if.else_in(v_m, v_n) [ v_m < 0 ]
eval_Ack_entry_in(v_m, v_n) -> eval_Ack_if.else_in(v_m, v_n) [ v_m > 0 ]
eval_Ack_if.then_in() -> eval_Ack_return_in()
eval_Ack_if.else_in(v_m, v_n) -> eval_Ack_if.then.2_in(v_m, v_n, v_m - 1) [ v_n = 0 ]
eval_Ack_if.else_in(v_m, v_n) -> eval_Ack_if.else.3_in(v_m, v_n, v_m - 1) [ v_n < 0 ]
eval_Ack_if.else_in(v_m, v_n) -> eval_Ack_if.else.3_in(v_m, v_n, v_m - 1) [ v_n > 0 ]
eval_Ack_if.then.2_in(v_m, v_n, v_sub) -> eval_Ack_start(v_sub, 1)
eval_Ack_if.then.2_in(v_m, v_n, v_sub) -> eval_Ack_return_in()
eval_Ack_if.else.3_in(v_m, v_n, v_sub) -> eval_Ack_start(v_m, v_n - 1)
eval_Ack_if.else.3_in(v_m, v_n, v_sub) -> eval_Ack_start(v_sub, nondef.1)
eval_Ack_if.else.3_in(v_m, v_n, v_sub) -> eval_Ack_return_in()
eval_Ack_return_in() -> eval_Ack_stop()
///*** 2_main ***///
eval_main_start() -> eval_main_stop()
