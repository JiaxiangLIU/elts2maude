Initial termination problem:
1:	eval_test_fun_start(v_x, v_y) -> eval_test_fun_entry_in()
	eval_test_fun_entry_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_while.body_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_lor.rhs_in()
	eval_test_fun_lor.rhs_in() -> eval_test_fun_while.body_in()
	eval_test_fun_lor.rhs_in() -> eval_test_fun_while.end_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.then_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.else_in()
	eval_test_fun_if.then_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.else_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_if.else_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.then.4_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_while.end_in() -> eval_test_fun_stop()
	eval_main_start() -> eval_main_stop()

The termination graph of problem 1 contains 1 nontrivial SCC:
2:	eval_test_fun_while.cond_in() -> eval_test_fun_while.body_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_lor.rhs_in()
	eval_test_fun_lor.rhs_in() -> eval_test_fun_while.body_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.then_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.else_in()
	eval_test_fun_if.then_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.else_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_if.else_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.then.4_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_while.cond_in()

By chaining the rule eval_test_fun_while.cond_in() -> eval_test_fun_while.body_in() with all rules in problem 2, the following new rules are obtained:
	eval_test_fun_while.cond_in() -> eval_test_fun_if.then_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.else_in()
We thus obtain the following problem:
3:	eval_test_fun_while.cond_in() -> eval_test_fun_lor.rhs_in()
	eval_test_fun_lor.rhs_in() -> eval_test_fun_while.body_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.then_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.else_in()
	eval_test_fun_if.then_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.else_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_if.else_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.then.4_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.then_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.else_in()

The termination graph of problem 3 contains 1 nontrivial SCC:
4:	eval_test_fun_while.cond_in() -> eval_test_fun_lor.rhs_in()
	eval_test_fun_lor.rhs_in() -> eval_test_fun_while.body_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.then_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.else_in()
	eval_test_fun_if.then_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.else_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_if.else_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.then.4_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.then_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.else_in()

By chaining the rule eval_test_fun_while.cond_in() -> eval_test_fun_lor.rhs_in() with all rule in problem 4, the following new rules are obtained:
	eval_test_fun_while.cond_in() -> eval_test_fun_while.body_in()
We thus obtain the following problem:
5:	eval_test_fun_lor.rhs_in() -> eval_test_fun_while.body_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.then_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.else_in()
	eval_test_fun_if.then_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.else_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_if.else_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.then.4_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.then_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.else_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_while.body_in()

The termination graph of problem 5 contains 1 nontrivial SCC:
6:	eval_test_fun_while.body_in() -> eval_test_fun_if.then_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.else_in()
	eval_test_fun_if.then_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.else_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_if.else_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.then.4_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.then_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.else_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_while.body_in()

By chaining the rule eval_test_fun_while.body_in() -> eval_test_fun_if.then_in() with all rule in problem 6, the following new rules are obtained:
	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()
We thus obtain the following problem:
7:	eval_test_fun_while.body_in() -> eval_test_fun_if.else_in()
	eval_test_fun_if.then_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.else_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_if.else_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.then.4_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.then_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.else_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_while.body_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()

The termination graph of problem 7 contains 1 nontrivial SCC:
8:	eval_test_fun_while.body_in() -> eval_test_fun_if.else_in()
	eval_test_fun_if.then_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.else_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_if.else_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.then.4_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.then_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.else_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_while.body_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()

By chaining the rule eval_test_fun_while.body_in() -> eval_test_fun_if.else_in() with all rules in problem 8, the following new rules are obtained:
	eval_test_fun_while.body_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()
We thus obtain the following problem:
9:	eval_test_fun_if.then_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.else_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_if.else_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.then.4_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.then_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.else_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_while.body_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()

The termination graph of problem 9 contains 1 nontrivial SCC:
10:	eval_test_fun_if.then_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.else_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_if.else_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.then.4_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.then_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.else_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_while.body_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()

By chaining the rule eval_test_fun_if.then_in() -> eval_test_fun_if.end.7_in() with all rule in problem 10, the following new rules are obtained:
	eval_test_fun_if.then_in() -> eval_test_fun_while.cond_in()
We thus obtain the following problem:
11:	eval_test_fun_if.else_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_if.else_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.then.4_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.then_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.else_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_while.body_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.then_in() -> eval_test_fun_while.cond_in()

The termination graph of problem 11 contains 1 nontrivial SCC:
12:	eval_test_fun_if.else_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_if.else_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.then.4_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.then_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.else_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_while.body_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.then_in() -> eval_test_fun_while.cond_in()

By chaining the rule eval_test_fun_if.else_in() -> eval_test_fun_if.then.4_in() with all rule in problem 12, the following new rules are obtained:
	eval_test_fun_if.else_in() -> eval_test_fun_if.end.7_in()
We thus obtain the following problem:
13:	eval_test_fun_if.else_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.then.4_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.then_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.else_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_while.body_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.then_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.else_in() -> eval_test_fun_if.end.7_in()

The termination graph of problem 13 contains 1 nontrivial SCC:
14:	eval_test_fun_if.else_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.then.4_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.then_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.else_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_while.body_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.then_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.else_in() -> eval_test_fun_if.end.7_in()

By chaining the rule eval_test_fun_if.else_in() -> eval_test_fun_if.end.7_in() with all rule in problem 14, the following new rules are obtained:
	eval_test_fun_if.else_in() -> eval_test_fun_while.cond_in()
We thus obtain the following problem:
15:	eval_test_fun_if.then.4_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.then_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.else_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_while.body_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.then_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.else_in() -> eval_test_fun_while.cond_in()

The termination graph of problem 15 contains 1 nontrivial SCC:
16:	eval_test_fun_if.then.4_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.then_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.else_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_while.body_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.then_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.else_in() -> eval_test_fun_while.cond_in()

By chaining the rule eval_test_fun_if.then.4_in() -> eval_test_fun_if.end.7_in() with all rule in problem 16, the following new rules are obtained:
	eval_test_fun_if.then.4_in() -> eval_test_fun_while.cond_in()
We thus obtain the following problem:
17:	eval_test_fun_if.end.7_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.then_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.else_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_while.body_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.then_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.else_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.then.4_in() -> eval_test_fun_while.cond_in()

The termination graph of problem 17 contains 1 nontrivial SCC:
18:	eval_test_fun_if.end.7_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.then_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.else_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_while.body_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.then_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.else_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.then.4_in() -> eval_test_fun_while.cond_in()

By chaining the rule eval_test_fun_if.end.7_in() -> eval_test_fun_while.cond_in() with all rules in problem 18, the following new rules are obtained:
	eval_test_fun_if.end.7_in() -> eval_test_fun_if.then_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_if.else_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_while.body_in()
We thus obtain the following problem:
19:	eval_test_fun_while.cond_in() -> eval_test_fun_if.then_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.else_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_while.body_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.then_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.else_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.then.4_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_if.then_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_if.else_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_while.body_in()

The termination graph of problem 19 contains 1 nontrivial SCC:
20:	eval_test_fun_while.cond_in() -> eval_test_fun_if.then_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.else_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_while.body_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.then_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.else_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.then.4_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_if.then_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_if.else_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_while.body_in()

By chaining the rule eval_test_fun_while.cond_in() -> eval_test_fun_if.then_in() with all rule in problem 20, the following new rules are obtained:
	eval_test_fun_while.cond_in() -> eval_test_fun_while.cond_in()
We thus obtain the following problem:
21:	eval_test_fun_while.cond_in() -> eval_test_fun_if.else_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_while.body_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.then_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.else_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.then.4_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_if.then_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_if.else_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_while.body_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_while.cond_in()

The termination graph of problem 21 contains 1 nontrivial SCC:
22:	eval_test_fun_while.cond_in() -> eval_test_fun_if.else_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_while.body_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.then_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.else_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.then.4_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_if.then_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_if.else_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_while.body_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_while.cond_in()

By chaining the rule eval_test_fun_while.cond_in() -> eval_test_fun_if.else_in() with all rule in problem 22, the following new rules are obtained:
	eval_test_fun_while.cond_in() -> eval_test_fun_while.cond_in()
We thus obtain the following problem:
23:	eval_test_fun_while.cond_in() -> eval_test_fun_while.body_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.then_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.else_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.then.4_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_if.then_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_if.else_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_while.body_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_while.cond_in()

The termination graph of problem 23 contains 1 nontrivial SCC:
24:	eval_test_fun_while.cond_in() -> eval_test_fun_while.body_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.then_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.else_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.then.4_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_if.then_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_if.else_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_while.body_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_while.cond_in()

By chaining the rule eval_test_fun_while.cond_in() -> eval_test_fun_while.body_in() with all rules in problem 24, the following new rules are obtained:
	eval_test_fun_while.cond_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.end.7_in()
We thus obtain the following problem:
25:	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.then_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.else_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.then.4_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_if.then_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_if.else_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_while.body_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.end.7_in()

The termination graph of problem 25 contains 1 nontrivial SCC:
26:	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_if.then_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.else_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.then.4_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_if.then_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_if.else_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_while.body_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.end.7_in()

By chaining the rule eval_test_fun_while.body_in() -> eval_test_fun_if.end.7_in() with all rules in problem 26, the following new rules are obtained:
	eval_test_fun_while.body_in() -> eval_test_fun_if.then_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.else_in()
	eval_test_fun_while.body_in() -> eval_test_fun_while.body_in()
We thus obtain the following problem:
27:	eval_test_fun_while.body_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_if.then_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.else_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.then.4_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_if.then_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_if.else_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_while.body_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.then_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.else_in()
	eval_test_fun_while.body_in() -> eval_test_fun_while.body_in()

The termination graph of problem 27 contains 1 nontrivial SCC:
28:	eval_test_fun_while.body_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_if.then_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.else_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.then.4_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_if.then_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_if.else_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_while.body_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.then_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.else_in()
	eval_test_fun_while.body_in() -> eval_test_fun_while.body_in()

By chaining the rule eval_test_fun_while.body_in() -> eval_test_fun_if.then.4_in() with all rule in problem 28, the following new rules are obtained:
	eval_test_fun_while.body_in() -> eval_test_fun_while.cond_in()
We thus obtain the following problem:
29:	eval_test_fun_if.then_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.else_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.then.4_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_if.then_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_if.else_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_while.body_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.then_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.else_in()
	eval_test_fun_while.body_in() -> eval_test_fun_while.body_in()
	eval_test_fun_while.body_in() -> eval_test_fun_while.cond_in()

The termination graph of problem 29 contains 1 nontrivial SCC:
30:	eval_test_fun_if.then_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.else_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.then.4_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_if.then_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_if.else_in()
	eval_test_fun_if.end.7_in() -> eval_test_fun_while.body_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_while.cond_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.then.4_in()
	eval_test_fun_while.cond_in() -> eval_test_fun_if.end.7_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.then_in()
	eval_test_fun_while.body_in() -> eval_test_fun_if.else_in()
	eval_test_fun_while.body_in() -> eval_test_fun_while.body_in()
	eval_test_fun_while.body_in() -> eval_test_fun_while.cond_in()

The following termination problem could not be handled:
eval_test_fun_if.then_in() -> eval_test_fun_while.cond_in()
eval_test_fun_if.else_in() -> eval_test_fun_while.cond_in()
eval_test_fun_if.then.4_in() -> eval_test_fun_while.cond_in()
eval_test_fun_if.end.7_in() -> eval_test_fun_if.then_in()
eval_test_fun_if.end.7_in() -> eval_test_fun_if.else_in()
eval_test_fun_if.end.7_in() -> eval_test_fun_while.body_in()
eval_test_fun_while.cond_in() -> eval_test_fun_while.cond_in()
eval_test_fun_while.cond_in() -> eval_test_fun_while.cond_in()
eval_test_fun_while.cond_in() -> eval_test_fun_if.end.7_in()
eval_test_fun_while.cond_in() -> eval_test_fun_if.then.4_in()
eval_test_fun_while.cond_in() -> eval_test_fun_if.end.7_in()
eval_test_fun_while.body_in() -> eval_test_fun_if.then_in()
eval_test_fun_while.body_in() -> eval_test_fun_if.else_in()
eval_test_fun_while.body_in() -> eval_test_fun_while.body_in()
eval_test_fun_while.body_in() -> eval_test_fun_while.cond_in()

Time: 2.314 sec (SMT: 2.237 sec)
