Initial termination problem:
1:	eval_test_fun_start(v_x, v_y) -> eval_test_fun_entry_in()
	eval_test_fun_entry_in() -> eval_test_fun_if.then_in()
	eval_test_fun_entry_in() -> eval_test_fun_if.end_in()
	eval_test_fun_if.then_in() -> eval_test_fun_return_in()
	eval_test_fun_if.end_in() -> eval_test_fun_while.cond_in(nondef.2, nondef.3)
	eval_test_fun_while.cond_in(v_6, v_7) -> eval_test_fun_while.body_in(v_6, v_7)
	eval_test_fun_while.cond_in(v_6, v_7) -> eval_test_fun_while.end_in()
	eval_test_fun_while.body_in(v_6, v_7) -> eval_test_fun_return_in() [ v_7 <= 0 ]
	eval_test_fun_while.body_in(v_6, v_7) -> eval_test_fun_if.end.4_in(v_6, v_7) [ v_7 > 0 ]
	eval_test_fun_if.end.4_in(v_6, v_7) -> eval_test_fun_while.cond_in(v_6, v_7)
	eval_test_fun_while.end_in() -> eval_test_fun_return_in()
	eval_test_fun_return_in() -> eval_test_fun_stop()
	eval_main_start() -> eval_main_stop()

The termination graph of problem 1 contains 1 nontrivial SCC:
2:	eval_test_fun_while.cond_in(v_6, v_7) -> eval_test_fun_while.body_in(v_6, v_7)
	eval_test_fun_while.body_in(v_6, v_7) -> eval_test_fun_if.end.4_in(v_6, v_7) [ v_7 > 0 ]
	eval_test_fun_if.end.4_in(v_6, v_7) -> eval_test_fun_while.cond_in(v_6, v_7)

By chaining the rule eval_test_fun_while.cond_in(v_6, v_7) -> eval_test_fun_while.body_in(v_6, v_7) with all rule in problem 2, the following new rules are obtained:
	eval_test_fun_while.cond_in(v_6, v_7) -> eval_test_fun_if.end.4_in(v_6, v_7) [ v_7 > 0 ]
We thus obtain the following problem:
3:	eval_test_fun_while.body_in(v_6, v_7) -> eval_test_fun_if.end.4_in(v_6, v_7) [ v_7 > 0 ]
	eval_test_fun_if.end.4_in(v_6, v_7) -> eval_test_fun_while.cond_in(v_6, v_7)
	eval_test_fun_while.cond_in(v_6, v_7) -> eval_test_fun_if.end.4_in(v_6, v_7) [ v_7 > 0 ]

The termination graph of problem 3 contains 1 nontrivial SCC:
4:	eval_test_fun_if.end.4_in(v_6, v_7) -> eval_test_fun_while.cond_in(v_6, v_7)
	eval_test_fun_while.cond_in(v_6, v_7) -> eval_test_fun_if.end.4_in(v_6, v_7) [ v_7 > 0 ]

By chaining the rule eval_test_fun_if.end.4_in(v_6, v_7) -> eval_test_fun_while.cond_in(v_6, v_7) with all rule in problem 4, the following new rules are obtained:
	eval_test_fun_if.end.4_in(v_6, v_7) -> eval_test_fun_if.end.4_in(v_6, v_7) [ v_7 > 0 ]
We thus obtain the following problem:
5:	eval_test_fun_while.cond_in(v_6, v_7) -> eval_test_fun_if.end.4_in(v_6, v_7) [ v_7 > 0 ]
	eval_test_fun_if.end.4_in(v_6, v_7) -> eval_test_fun_if.end.4_in(v_6, v_7) [ v_7 > 0 ]

The termination graph of problem 5 contains 1 nontrivial SCC:
6:	eval_test_fun_if.end.4_in(v_6, v_7) -> eval_test_fun_if.end.4_in(v_6, v_7) [ v_7 > 0 ]

The following termination problem could not be handled:
eval_test_fun_if.end.4_in(v_6, v_7) -> eval_test_fun_if.end.4_in(v_6, v_7) [ v_7 > 0 ]

Time: 0.556 sec (SMT: 0.538 sec)
