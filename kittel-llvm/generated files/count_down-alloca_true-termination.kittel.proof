Initial termination problem:
1:	eval_main_start() -> eval_main_entry_in()
	eval_main_entry_in() -> eval_main_for.cond_in(1, 0)
	eval_main_entry_in() -> eval_main_return_in()
	eval_main_entry_in() -> eval_main_for.cond_in(nondef.0, 0) [ nondef.0 >= 1 ]
	eval_main_for.cond_in(v_.call, v_i.0) -> eval_main_for.body_in(v_.call, v_i.0) [ v_i.0 < v_.call ]
	eval_main_for.cond_in(v_.call, v_i.0) -> eval_main_for.cond.10_in(v_.call, 0) [ v_i.0 >= v_.call ]
	eval_main_for.body_in(v_.call, v_i.0) -> eval_main_for.cond_in(v_.call, v_i.0 + 1)
	eval_main_for.cond.10_in(v_.call, v_j.0) -> eval_main_for.body.13_in(v_.call, v_j.0) [ v_j.0 < v_.call ]
	eval_main_for.cond.10_in(v_.call, v_j.0) -> eval_main_return_in() [ v_j.0 >= v_.call ]
	eval_main_for.body.13_in(v_.call, v_j.0) -> eval_main_while.cond_in(v_.call, v_j.0)
	eval_main_while.cond_in(v_.call, v_j.0) -> eval_main_while.body_in(v_.call, v_j.0)
	eval_main_while.cond_in(v_.call, v_j.0) -> eval_main_for.inc.20_in(v_.call, v_j.0)
	eval_main_while.body_in(v_.call, v_j.0) -> eval_main_while.cond_in(v_.call, v_j.0)
	eval_main_for.inc.20_in(v_.call, v_j.0) -> eval_main_for.cond.10_in(v_.call, v_j.0 + 1)
	eval_main_return_in() -> eval_main_stop()

The termination graph of problem 1 contains 2 nontrivial SCCs:
2:	eval_main_for.cond.10_in(v_.call, v_j.0) -> eval_main_for.body.13_in(v_.call, v_j.0) [ v_j.0 < v_.call ]
	eval_main_for.body.13_in(v_.call, v_j.0) -> eval_main_while.cond_in(v_.call, v_j.0)
	eval_main_while.cond_in(v_.call, v_j.0) -> eval_main_while.body_in(v_.call, v_j.0)
	eval_main_while.cond_in(v_.call, v_j.0) -> eval_main_for.inc.20_in(v_.call, v_j.0)
	eval_main_while.body_in(v_.call, v_j.0) -> eval_main_while.cond_in(v_.call, v_j.0)
	eval_main_for.inc.20_in(v_.call, v_j.0) -> eval_main_for.cond.10_in(v_.call, v_j.0 + 1)

3:	eval_main_for.cond_in(v_.call, v_i.0) -> eval_main_for.body_in(v_.call, v_i.0) [ v_i.0 < v_.call ]
	eval_main_for.body_in(v_.call, v_i.0) -> eval_main_for.cond_in(v_.call, v_i.0 + 1)

A polynomial interpretation with
	Pol(eval_main_for.cond.10_in) = X_1 - X_2
	Pol(eval_main_for.body.13_in) = X_1 - X_2 - 1
	Pol(eval_main_while.cond_in) = X_1 - X_2 - 1
	Pol(eval_main_while.body_in) = X_1 - X_2 - 1
	Pol(eval_main_for.inc.20_in) = X_1 - X_2 - 1
removes the following rule from problem 2:
	eval_main_for.cond.10_in(v_.call, v_j.0) -> eval_main_for.body.13_in(v_.call, v_j.0) [ v_j.0 < v_.call ]
We thus obtain the following problem:
4:	eval_main_for.body.13_in(v_.call, v_j.0) -> eval_main_while.cond_in(v_.call, v_j.0)
	eval_main_while.cond_in(v_.call, v_j.0) -> eval_main_while.body_in(v_.call, v_j.0)
	eval_main_while.cond_in(v_.call, v_j.0) -> eval_main_for.inc.20_in(v_.call, v_j.0)
	eval_main_while.body_in(v_.call, v_j.0) -> eval_main_while.cond_in(v_.call, v_j.0)
	eval_main_for.inc.20_in(v_.call, v_j.0) -> eval_main_for.cond.10_in(v_.call, v_j.0 + 1)

The termination graph of problem 4 contains 1 nontrivial SCC:
5:	eval_main_while.cond_in(v_.call, v_j.0) -> eval_main_while.body_in(v_.call, v_j.0)
	eval_main_while.body_in(v_.call, v_j.0) -> eval_main_while.cond_in(v_.call, v_j.0)

By chaining the rule eval_main_while.cond_in(v_.call, v_j.0) -> eval_main_while.body_in(v_.call, v_j.0) with all rule in problem 5, the following new rules are obtained:
	eval_main_while.cond_in(v_.call, v_j.0) -> eval_main_while.cond_in(v_.call, v_j.0)
We thus obtain the following problem:
6:	eval_main_while.body_in(v_.call, v_j.0) -> eval_main_while.cond_in(v_.call, v_j.0)
	eval_main_while.cond_in(v_.call, v_j.0) -> eval_main_while.cond_in(v_.call, v_j.0)

The termination graph of problem 6 contains 1 nontrivial SCC:
7:	eval_main_while.cond_in(v_.call, v_j.0) -> eval_main_while.cond_in(v_.call, v_j.0)

The following termination problem could not be handled:
eval_main_while.cond_in(v_.call, v_j.0) -> eval_main_while.cond_in(v_.call, v_j.0)

Time: 0.637 sec (SMT: 0.621 sec)
