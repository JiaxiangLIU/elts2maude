Initial termination problem:
1:	eval_main_start() -> eval_main_entry_in()
	eval_main_entry_in() -> eval_main_while.cond_in(0)
	eval_main_while.cond_in(v_i.0) -> eval_main_while.cond.1_in(v_i.0, 0) [ v_i.0 < 100 ]
	eval_main_while.cond_in(v_i.0) -> eval_main_while.end.5_in() [ v_i.0 >= 100 ]
	eval_main_while.cond.1_in(v_i.0, v_j.0) -> eval_main_while.body.3_in(v_i.0, v_j.0) [ v_j.0 < 1 ]
	eval_main_while.cond.1_in(v_i.0, v_j.0) -> eval_main_while.end_in(v_i.0, v_j.0) [ v_j.0 >= 1 ]
	eval_main_while.body.3_in(v_i.0, v_j.0) -> eval_main_while.cond.1_in(v_i.0, v_j.0)
	eval_main_while.end_in(v_i.0, v_j.0) -> eval_main_while.cond_in(v_i.0 + 1)
	eval_main_while.end.5_in() -> eval_main_stop()

The termination graph of problem 1 contains 1 nontrivial SCC:
2:	eval_main_while.cond_in(v_i.0) -> eval_main_while.cond.1_in(v_i.0, 0) [ v_i.0 < 100 ]
	eval_main_while.cond.1_in(v_i.0, v_j.0) -> eval_main_while.body.3_in(v_i.0, v_j.0) [ v_j.0 < 1 ]
	eval_main_while.cond.1_in(v_i.0, v_j.0) -> eval_main_while.end_in(v_i.0, v_j.0) [ v_j.0 >= 1 ]
	eval_main_while.body.3_in(v_i.0, v_j.0) -> eval_main_while.cond.1_in(v_i.0, v_j.0)
	eval_main_while.end_in(v_i.0, v_j.0) -> eval_main_while.cond_in(v_i.0 + 1)

A polynomial interpretation with
	Pol(eval_main_while.cond_in) = -X_1 + 99
	Pol(eval_main_while.cond.1_in) = -X_1 + 101*X_2 - 1
	Pol(eval_main_while.body.3_in) = -X_1 + 101*X_2 - 1
	Pol(eval_main_while.end_in) = -X_1 + 99
removes the following rule from problem 2:
	eval_main_while.cond_in(v_i.0) -> eval_main_while.cond.1_in(v_i.0, 0) [ v_i.0 < 100 ]
We thus obtain the following problem:
3:	eval_main_while.cond.1_in(v_i.0, v_j.0) -> eval_main_while.body.3_in(v_i.0, v_j.0) [ v_j.0 < 1 ]
	eval_main_while.cond.1_in(v_i.0, v_j.0) -> eval_main_while.end_in(v_i.0, v_j.0) [ v_j.0 >= 1 ]
	eval_main_while.body.3_in(v_i.0, v_j.0) -> eval_main_while.cond.1_in(v_i.0, v_j.0)
	eval_main_while.end_in(v_i.0, v_j.0) -> eval_main_while.cond_in(v_i.0 + 1)

The termination graph of problem 3 contains 1 nontrivial SCC:
4:	eval_main_while.cond.1_in(v_i.0, v_j.0) -> eval_main_while.body.3_in(v_i.0, v_j.0) [ v_j.0 < 1 ]
	eval_main_while.body.3_in(v_i.0, v_j.0) -> eval_main_while.cond.1_in(v_i.0, v_j.0)

By chaining the rule eval_main_while.cond.1_in(v_i.0, v_j.0) -> eval_main_while.body.3_in(v_i.0, v_j.0) [ v_j.0 < 1 ] with all rule in problem 4, the following new rules are obtained:
	eval_main_while.cond.1_in(v_i.0, v_j.0) -> eval_main_while.cond.1_in(v_i.0, v_j.0) [ v_j.0 < 1 ]
We thus obtain the following problem:
5:	eval_main_while.body.3_in(v_i.0, v_j.0) -> eval_main_while.cond.1_in(v_i.0, v_j.0)
	eval_main_while.cond.1_in(v_i.0, v_j.0) -> eval_main_while.cond.1_in(v_i.0, v_j.0) [ v_j.0 < 1 ]

The termination graph of problem 5 contains 1 nontrivial SCC:
6:	eval_main_while.cond.1_in(v_i.0, v_j.0) -> eval_main_while.cond.1_in(v_i.0, v_j.0) [ v_j.0 < 1 ]

The following termination problem could not be handled:
eval_main_while.cond.1_in(v_i.0, v_j.0) -> eval_main_while.cond.1_in(v_i.0, v_j.0) [ v_j.0 < 1 ]

Time: 0.402 sec (SMT: 0.389 sec)
