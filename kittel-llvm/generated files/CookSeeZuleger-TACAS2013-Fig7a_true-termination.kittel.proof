Initial termination problem:
1:	eval_main_start() -> eval_main_entry_in()
	eval_main_entry_in() -> eval_main_while.cond_in(nondef.1, nondef.0, nondef.2)
	eval_main_while.cond_in(v_y.0, v_x.0, v_d.0) -> eval_main_while.body_in(v_y.0, v_x.0, v_d.0) [ v_x.0 > 0 /\ v_y.0 > 0 /\ v_d.0 > 0 ]
	eval_main_while.cond_in(v_y.0, v_x.0, v_d.0) -> eval_main_while.end_in() [ v_x.0 <= 0 ]
	eval_main_while.cond_in(v_y.0, v_x.0, v_d.0) -> eval_main_while.end_in() [ v_y.0 <= 0 ]
	eval_main_while.cond_in(v_y.0, v_x.0, v_d.0) -> eval_main_while.end_in() [ v_d.0 <= 0 ]
	eval_main_while.body_in(v_y.0, v_x.0, v_d.0) -> eval_main_if.then_in(v_y.0, v_x.0, v_d.0)
	eval_main_while.body_in(v_y.0, v_x.0, v_d.0) -> eval_main_if.else_in(v_y.0, v_x.0, v_d.0)
	eval_main_if.then_in(v_y.0, v_x.0, v_d.0) -> eval_main_while.cond_in(v_y.0, v_x.0 - 1, nondef.4)
	eval_main_if.else_in(v_y.0, v_x.0, v_d.0) -> eval_main_while.cond_in(v_y.0 - 1, nondef.5, v_d.0 - 1)
	eval_main_while.end_in() -> eval_main_stop()

The termination graph of problem 1 contains 1 nontrivial SCC:
2:	eval_main_while.cond_in(v_y.0, v_x.0, v_d.0) -> eval_main_while.body_in(v_y.0, v_x.0, v_d.0) [ v_x.0 > 0 /\ v_y.0 > 0 /\ v_d.0 > 0 ]
	eval_main_while.body_in(v_y.0, v_x.0, v_d.0) -> eval_main_if.then_in(v_y.0, v_x.0, v_d.0)
	eval_main_while.body_in(v_y.0, v_x.0, v_d.0) -> eval_main_if.else_in(v_y.0, v_x.0, v_d.0)
	eval_main_if.then_in(v_y.0, v_x.0, v_d.0) -> eval_main_while.cond_in(v_y.0, v_x.0 - 1, nondef.4)
	eval_main_if.else_in(v_y.0, v_x.0, v_d.0) -> eval_main_while.cond_in(v_y.0 - 1, nondef.5, v_d.0 - 1)

By chaining the rule eval_main_while.cond_in(v_y.0, v_x.0, v_d.0) -> eval_main_while.body_in(v_y.0, v_x.0, v_d.0) [ v_x.0 > 0 /\ v_y.0 > 0 /\ v_d.0 > 0 ] with all rules in problem 2, the following new rules are obtained:
	eval_main_while.cond_in(v_y.0, v_x.0, v_d.0) -> eval_main_if.then_in(v_y.0, v_x.0, v_d.0) [ v_x.0 > 0 /\ v_y.0 > 0 /\ v_d.0 > 0 ]
	eval_main_while.cond_in(v_y.0, v_x.0, v_d.0) -> eval_main_if.else_in(v_y.0, v_x.0, v_d.0) [ v_x.0 > 0 /\ v_y.0 > 0 /\ v_d.0 > 0 ]
We thus obtain the following problem:
3:	eval_main_while.body_in(v_y.0, v_x.0, v_d.0) -> eval_main_if.then_in(v_y.0, v_x.0, v_d.0)
	eval_main_while.body_in(v_y.0, v_x.0, v_d.0) -> eval_main_if.else_in(v_y.0, v_x.0, v_d.0)
	eval_main_if.then_in(v_y.0, v_x.0, v_d.0) -> eval_main_while.cond_in(v_y.0, v_x.0 - 1, nondef.4)
	eval_main_if.else_in(v_y.0, v_x.0, v_d.0) -> eval_main_while.cond_in(v_y.0 - 1, nondef.5, v_d.0 - 1)
	eval_main_while.cond_in(v_y.0, v_x.0, v_d.0) -> eval_main_if.then_in(v_y.0, v_x.0, v_d.0) [ v_x.0 > 0 /\ v_y.0 > 0 /\ v_d.0 > 0 ]
	eval_main_while.cond_in(v_y.0, v_x.0, v_d.0) -> eval_main_if.else_in(v_y.0, v_x.0, v_d.0) [ v_x.0 > 0 /\ v_y.0 > 0 /\ v_d.0 > 0 ]

The termination graph of problem 3 contains 1 nontrivial SCC:
4:	eval_main_if.then_in(v_y.0, v_x.0, v_d.0) -> eval_main_while.cond_in(v_y.0, v_x.0 - 1, nondef.4)
	eval_main_if.else_in(v_y.0, v_x.0, v_d.0) -> eval_main_while.cond_in(v_y.0 - 1, nondef.5, v_d.0 - 1)
	eval_main_while.cond_in(v_y.0, v_x.0, v_d.0) -> eval_main_if.then_in(v_y.0, v_x.0, v_d.0) [ v_x.0 > 0 /\ v_y.0 > 0 /\ v_d.0 > 0 ]
	eval_main_while.cond_in(v_y.0, v_x.0, v_d.0) -> eval_main_if.else_in(v_y.0, v_x.0, v_d.0) [ v_x.0 > 0 /\ v_y.0 > 0 /\ v_d.0 > 0 ]

A polynomial interpretation with
	Pol(eval_main_if.then_in) = 2*X_1 - 1
	Pol(eval_main_while.cond_in) = 2*X_1 - 1
	Pol(eval_main_if.else_in) = 2*X_1 - 2
removes the following rule from problem 4:
	eval_main_while.cond_in(v_y.0, v_x.0, v_d.0) -> eval_main_if.else_in(v_y.0, v_x.0, v_d.0) [ v_x.0 > 0 /\ v_y.0 > 0 /\ v_d.0 > 0 ]
We thus obtain the following problem:
5:	eval_main_if.then_in(v_y.0, v_x.0, v_d.0) -> eval_main_while.cond_in(v_y.0, v_x.0 - 1, nondef.4)
	eval_main_if.else_in(v_y.0, v_x.0, v_d.0) -> eval_main_while.cond_in(v_y.0 - 1, nondef.5, v_d.0 - 1)
	eval_main_while.cond_in(v_y.0, v_x.0, v_d.0) -> eval_main_if.then_in(v_y.0, v_x.0, v_d.0) [ v_x.0 > 0 /\ v_y.0 > 0 /\ v_d.0 > 0 ]

The termination graph of problem 5 contains 1 nontrivial SCC:
6:	eval_main_if.then_in(v_y.0, v_x.0, v_d.0) -> eval_main_while.cond_in(v_y.0, v_x.0 - 1, nondef.4)
	eval_main_while.cond_in(v_y.0, v_x.0, v_d.0) -> eval_main_if.then_in(v_y.0, v_x.0, v_d.0) [ v_x.0 > 0 /\ v_y.0 > 0 /\ v_d.0 > 0 ]

A polynomial interpretation with
	Pol(eval_main_if.then_in) = X_1 + 2*X_2 - 1
	Pol(eval_main_while.cond_in) = X_1 + 2*X_2
removes the following rule from problem 6:
	eval_main_while.cond_in(v_y.0, v_x.0, v_d.0) -> eval_main_if.then_in(v_y.0, v_x.0, v_d.0) [ v_x.0 > 0 /\ v_y.0 > 0 /\ v_d.0 > 0 ]
We thus obtain the following problem:
7:	eval_main_if.then_in(v_y.0, v_x.0, v_d.0) -> eval_main_while.cond_in(v_y.0, v_x.0 - 1, nondef.4)

The termination graph of problem 7 contains no nontrivial SCC.

Termination successfully shown!

Time: 0.584 sec (SMT: 0.563 sec)
