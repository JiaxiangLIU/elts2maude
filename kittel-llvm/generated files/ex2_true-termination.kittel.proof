Initial termination problem:
1:	eval_main_start() -> eval_main_entry_in()
	eval_main_entry_in() -> eval_main_while.cond_in(nondef.0, nondef.2, nondef.1, 1)
	eval_main_while.cond_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_while.body_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 < v_call2 /\ v_flag.0 > 0 ]
	eval_main_while.cond_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_while.end_in() [ v_y.0 >= v_call2 ]
	eval_main_while.cond_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_while.end_in() [ v_flag.0 <= 0 ]
	eval_main_while.body_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.then_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 > 0 /\ v_call > 1 ]
	eval_main_while.body_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 <= 0 ]
	eval_main_while.body_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) [ v_call <= 1 ]
	eval_main_if.then_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_call*v_y.0, v_flag.0)
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, -v_call*v_y.0, v_flag.0) [ v_y.0 > 0 /\ v_call < -1 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, -v_call*v_y.0, 0) [ v_y.0 > 0 /\ v_call < -1 /\ v_y.0 <= 0 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, -v_call*v_y.0, 0) [ v_y.0 > 0 /\ v_call < -1 /\ v_call >= -1 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, v_flag.0) [ v_y.0 <= 0 /\ v_y.0 > 0 /\ v_call < -1 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, v_flag.0) [ v_call >= -1 /\ v_y.0 > 0 /\ v_call < -1 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_y.0 <= 0 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_y.0 <= 0 /\ v_call >= -1 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_call >= -1 /\ v_y.0 <= 0 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_call >= -1 ]
	eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.2, v_flag.2) -> eval_main_while.cond_in(v_call, v_call2, v_y.2, v_flag.2)
	eval_main_while.end_in() -> eval_main_stop()

Testing for unsatisfiable constraints removes the following rules from problem 1:
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, -v_call*v_y.0, 0) [ v_y.0 > 0 /\ v_call < -1 /\ v_y.0 <= 0 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, -v_call*v_y.0, 0) [ v_y.0 > 0 /\ v_call < -1 /\ v_call >= -1 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, v_flag.0) [ v_y.0 <= 0 /\ v_y.0 > 0 /\ v_call < -1 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, v_flag.0) [ v_call >= -1 /\ v_y.0 > 0 /\ v_call < -1 ]
We thus obtain the following problem:
2:	eval_main_start() -> eval_main_entry_in()
	eval_main_entry_in() -> eval_main_while.cond_in(nondef.0, nondef.2, nondef.1, 1)
	eval_main_while.cond_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_while.body_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 < v_call2 /\ v_flag.0 > 0 ]
	eval_main_while.cond_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_while.end_in() [ v_y.0 >= v_call2 ]
	eval_main_while.cond_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_while.end_in() [ v_flag.0 <= 0 ]
	eval_main_while.body_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.then_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 > 0 /\ v_call > 1 ]
	eval_main_while.body_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 <= 0 ]
	eval_main_while.body_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) [ v_call <= 1 ]
	eval_main_if.then_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_call*v_y.0, v_flag.0)
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, -v_call*v_y.0, v_flag.0) [ v_y.0 > 0 /\ v_call < -1 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_y.0 <= 0 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_y.0 <= 0 /\ v_call >= -1 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_call >= -1 /\ v_y.0 <= 0 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_call >= -1 ]
	eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.2, v_flag.2) -> eval_main_while.cond_in(v_call, v_call2, v_y.2, v_flag.2)
	eval_main_while.end_in() -> eval_main_stop()

The termination graph of problem 2 contains 1 nontrivial SCC:
3:	eval_main_while.cond_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_while.body_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 < v_call2 /\ v_flag.0 > 0 ]
	eval_main_while.body_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.then_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 > 0 /\ v_call > 1 ]
	eval_main_while.body_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 <= 0 ]
	eval_main_while.body_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) [ v_call <= 1 ]
	eval_main_if.then_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_call*v_y.0, v_flag.0)
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, -v_call*v_y.0, v_flag.0) [ v_y.0 > 0 /\ v_call < -1 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_y.0 <= 0 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_y.0 <= 0 /\ v_call >= -1 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_call >= -1 /\ v_y.0 <= 0 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_call >= -1 ]
	eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.2, v_flag.2) -> eval_main_while.cond_in(v_call, v_call2, v_y.2, v_flag.2)

By chaining the rule eval_main_while.cond_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_while.body_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 < v_call2 /\ v_flag.0 > 0 ] with all rules in problem 3, the following new rules are obtained:
	eval_main_while.cond_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.then_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 < v_call2 /\ v_flag.0 > 0 /\ v_y.0 > 0 /\ v_call > 1 ]
	eval_main_while.cond_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 < v_call2 /\ v_flag.0 > 0 /\ v_y.0 <= 0 ]
	eval_main_while.cond_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 < v_call2 /\ v_flag.0 > 0 /\ v_call <= 1 ]
We thus obtain the following problem:
4:	eval_main_while.body_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.then_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 > 0 /\ v_call > 1 ]
	eval_main_while.body_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 <= 0 ]
	eval_main_while.body_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) [ v_call <= 1 ]
	eval_main_if.then_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_call*v_y.0, v_flag.0)
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, -v_call*v_y.0, v_flag.0) [ v_y.0 > 0 /\ v_call < -1 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_y.0 <= 0 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_y.0 <= 0 /\ v_call >= -1 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_call >= -1 /\ v_y.0 <= 0 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_call >= -1 ]
	eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.2, v_flag.2) -> eval_main_while.cond_in(v_call, v_call2, v_y.2, v_flag.2)
	eval_main_while.cond_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.then_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 < v_call2 /\ v_flag.0 > 0 /\ v_y.0 > 0 /\ v_call > 1 ]
	eval_main_while.cond_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 < v_call2 /\ v_flag.0 > 0 /\ v_y.0 <= 0 ]
	eval_main_while.cond_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 < v_call2 /\ v_flag.0 > 0 /\ v_call <= 1 ]

The termination graph of problem 4 contains 1 nontrivial SCC:
5:	eval_main_if.then_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_call*v_y.0, v_flag.0)
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, -v_call*v_y.0, v_flag.0) [ v_y.0 > 0 /\ v_call < -1 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_y.0 <= 0 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_y.0 <= 0 /\ v_call >= -1 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_call >= -1 /\ v_y.0 <= 0 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_call >= -1 ]
	eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.2, v_flag.2) -> eval_main_while.cond_in(v_call, v_call2, v_y.2, v_flag.2)
	eval_main_while.cond_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.then_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 < v_call2 /\ v_flag.0 > 0 /\ v_y.0 > 0 /\ v_call > 1 ]
	eval_main_while.cond_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 < v_call2 /\ v_flag.0 > 0 /\ v_y.0 <= 0 ]
	eval_main_while.cond_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 < v_call2 /\ v_flag.0 > 0 /\ v_call <= 1 ]

A polynomial interpretation with
	Pol(eval_main_if.then_in) = -4*X_1 + 17*X_2 + 8*X_1^2 - 20*X_1*X_3 + X_2^2 + 8*X_4^2 - 20
	Pol(eval_main_if.end.12_in) = -4*X_1 + 17*X_2 - 20*X_5 + 8*X_1^2 + X_2^2 + 8*X_6^2 - 21
	Pol(eval_main_if.else_in) = -4*X_1 + 17*X_2 - 20*X_3 + 8*X_1^2 + X_2^2 + 8*X_4^2 - 21
	Pol(eval_main_while.cond_in) = -4*X_1 + 17*X_2 - 20*X_3 + 8*X_1^2 + X_2^2 + 8*X_4^2 - 21
removes the following rule from problem 5:
	eval_main_while.cond_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.then_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 < v_call2 /\ v_flag.0 > 0 /\ v_y.0 > 0 /\ v_call > 1 ]
We thus obtain the following problem:
6:	eval_main_if.then_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_call*v_y.0, v_flag.0)
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, -v_call*v_y.0, v_flag.0) [ v_y.0 > 0 /\ v_call < -1 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_y.0 <= 0 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_y.0 <= 0 /\ v_call >= -1 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_call >= -1 /\ v_y.0 <= 0 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_call >= -1 ]
	eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.2, v_flag.2) -> eval_main_while.cond_in(v_call, v_call2, v_y.2, v_flag.2)
	eval_main_while.cond_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 < v_call2 /\ v_flag.0 > 0 /\ v_y.0 <= 0 ]
	eval_main_while.cond_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 < v_call2 /\ v_flag.0 > 0 /\ v_call <= 1 ]

The termination graph of problem 6 contains 1 nontrivial SCC:
7:	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, -v_call*v_y.0, v_flag.0) [ v_y.0 > 0 /\ v_call < -1 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_y.0 <= 0 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_y.0 <= 0 /\ v_call >= -1 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_call >= -1 /\ v_y.0 <= 0 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_call >= -1 ]
	eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.2, v_flag.2) -> eval_main_while.cond_in(v_call, v_call2, v_y.2, v_flag.2)
	eval_main_while.cond_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 < v_call2 /\ v_flag.0 > 0 /\ v_y.0 <= 0 ]
	eval_main_while.cond_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 < v_call2 /\ v_flag.0 > 0 /\ v_call <= 1 ]

By chaining the rule eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_y.0 <= 0 ] with all rule in problem 7, the following new rules are obtained:
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_while.cond_in(v_call, v_call2, v_y.0, 0) [ v_y.0 <= 0 ]
We thus obtain the following problem:
8:	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, -v_call*v_y.0, v_flag.0) [ v_y.0 > 0 /\ v_call < -1 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_y.0 <= 0 /\ v_call >= -1 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_call >= -1 /\ v_y.0 <= 0 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_call >= -1 ]
	eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.2, v_flag.2) -> eval_main_while.cond_in(v_call, v_call2, v_y.2, v_flag.2)
	eval_main_while.cond_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 < v_call2 /\ v_flag.0 > 0 /\ v_y.0 <= 0 ]
	eval_main_while.cond_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 < v_call2 /\ v_flag.0 > 0 /\ v_call <= 1 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_while.cond_in(v_call, v_call2, v_y.0, 0) [ v_y.0 <= 0 ]

The termination graph of problem 8 contains 1 nontrivial SCC:
9:	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, -v_call*v_y.0, v_flag.0) [ v_y.0 > 0 /\ v_call < -1 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_y.0 <= 0 /\ v_call >= -1 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_call >= -1 /\ v_y.0 <= 0 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_call >= -1 ]
	eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.2, v_flag.2) -> eval_main_while.cond_in(v_call, v_call2, v_y.2, v_flag.2)
	eval_main_while.cond_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 < v_call2 /\ v_flag.0 > 0 /\ v_y.0 <= 0 ]
	eval_main_while.cond_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 < v_call2 /\ v_flag.0 > 0 /\ v_call <= 1 ]

By chaining the rule eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_y.0 <= 0 /\ v_call >= -1 ] with all rule in problem 9, the following new rules are obtained:
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_while.cond_in(v_call, v_call2, v_y.0, 0) [ v_y.0 <= 0 /\ v_call >= -1 ]
We thus obtain the following problem:
10:	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, -v_call*v_y.0, v_flag.0) [ v_y.0 > 0 /\ v_call < -1 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_call >= -1 /\ v_y.0 <= 0 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_call >= -1 ]
	eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.2, v_flag.2) -> eval_main_while.cond_in(v_call, v_call2, v_y.2, v_flag.2)
	eval_main_while.cond_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 < v_call2 /\ v_flag.0 > 0 /\ v_y.0 <= 0 ]
	eval_main_while.cond_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 < v_call2 /\ v_flag.0 > 0 /\ v_call <= 1 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_while.cond_in(v_call, v_call2, v_y.0, 0) [ v_y.0 <= 0 /\ v_call >= -1 ]

The termination graph of problem 10 contains 1 nontrivial SCC:
11:	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, -v_call*v_y.0, v_flag.0) [ v_y.0 > 0 /\ v_call < -1 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_call >= -1 /\ v_y.0 <= 0 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_call >= -1 ]
	eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.2, v_flag.2) -> eval_main_while.cond_in(v_call, v_call2, v_y.2, v_flag.2)
	eval_main_while.cond_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 < v_call2 /\ v_flag.0 > 0 /\ v_y.0 <= 0 ]
	eval_main_while.cond_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 < v_call2 /\ v_flag.0 > 0 /\ v_call <= 1 ]

By chaining the rule eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_call >= -1 /\ v_y.0 <= 0 ] with all rule in problem 11, the following new rules are obtained:
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_while.cond_in(v_call, v_call2, v_y.0, 0) [ v_call >= -1 /\ v_y.0 <= 0 ]
We thus obtain the following problem:
12:	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, -v_call*v_y.0, v_flag.0) [ v_y.0 > 0 /\ v_call < -1 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_call >= -1 ]
	eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.2, v_flag.2) -> eval_main_while.cond_in(v_call, v_call2, v_y.2, v_flag.2)
	eval_main_while.cond_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 < v_call2 /\ v_flag.0 > 0 /\ v_y.0 <= 0 ]
	eval_main_while.cond_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 < v_call2 /\ v_flag.0 > 0 /\ v_call <= 1 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_while.cond_in(v_call, v_call2, v_y.0, 0) [ v_call >= -1 /\ v_y.0 <= 0 ]

The termination graph of problem 12 contains 1 nontrivial SCC:
13:	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, -v_call*v_y.0, v_flag.0) [ v_y.0 > 0 /\ v_call < -1 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_call >= -1 ]
	eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.2, v_flag.2) -> eval_main_while.cond_in(v_call, v_call2, v_y.2, v_flag.2)
	eval_main_while.cond_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 < v_call2 /\ v_flag.0 > 0 /\ v_y.0 <= 0 ]
	eval_main_while.cond_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 < v_call2 /\ v_flag.0 > 0 /\ v_call <= 1 ]

By chaining the rule eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.0, 0) [ v_call >= -1 ] with all rule in problem 13, the following new rules are obtained:
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_while.cond_in(v_call, v_call2, v_y.0, 0) [ v_call >= -1 ]
We thus obtain the following problem:
14:	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, -v_call*v_y.0, v_flag.0) [ v_y.0 > 0 /\ v_call < -1 ]
	eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.2, v_flag.2) -> eval_main_while.cond_in(v_call, v_call2, v_y.2, v_flag.2)
	eval_main_while.cond_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 < v_call2 /\ v_flag.0 > 0 /\ v_y.0 <= 0 ]
	eval_main_while.cond_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 < v_call2 /\ v_flag.0 > 0 /\ v_call <= 1 ]
	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_while.cond_in(v_call, v_call2, v_y.0, 0) [ v_call >= -1 ]

The termination graph of problem 14 contains 1 nontrivial SCC:
15:	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, -v_call*v_y.0, v_flag.0) [ v_y.0 > 0 /\ v_call < -1 ]
	eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.2, v_flag.2) -> eval_main_while.cond_in(v_call, v_call2, v_y.2, v_flag.2)
	eval_main_while.cond_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 < v_call2 /\ v_flag.0 > 0 /\ v_call <= 1 ]

A polynomial interpretation with
	Pol(eval_main_if.else_in) = -X_1 + 3*X_2 - 3*X_3 + 3*X_4 - 3
	Pol(eval_main_if.end.12_in) = -X_1 + 3*X_2 - 3*X_5 + 3*X_6 - 1
	Pol(eval_main_while.cond_in) = -X_1 + 3*X_2 - 3*X_3 + 3*X_4 - 2
removes the following rule from problem 15:
	eval_main_while.cond_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) [ v_y.0 < v_call2 /\ v_flag.0 > 0 /\ v_call <= 1 ]
We thus obtain the following problem:
16:	eval_main_if.else_in(v_call, v_call2, v_y.0, v_flag.0) -> eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, -v_call*v_y.0, v_flag.0) [ v_y.0 > 0 /\ v_call < -1 ]
	eval_main_if.end.12_in(v_call, v_call2, v_y.0, v_flag.0, v_y.2, v_flag.2) -> eval_main_while.cond_in(v_call, v_call2, v_y.2, v_flag.2)

The termination graph of problem 16 contains no nontrivial SCC.

Termination successfully shown!

Time: 2.455 sec (SMT: 2.042 sec)
