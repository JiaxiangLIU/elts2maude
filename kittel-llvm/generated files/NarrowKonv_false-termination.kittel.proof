Initial termination problem:
1:	eval_main_start() -> eval_main_entry_in()
	eval_main_entry_in() -> eval_main_while.cond_in(nondef.0, 20)
	eval_main_while.cond_in(v_i.0, v_range.0) -> eval_main_while.body_in(v_i.0, v_range.0) [ 0 <= v_i.0 /\ v_i.0 <= v_range.0 ]
	eval_main_while.cond_in(v_i.0, v_range.0) -> eval_main_while.end_in() [ 0 > v_i.0 ]
	eval_main_while.cond_in(v_i.0, v_range.0) -> eval_main_while.end_in() [ v_i.0 > v_range.0 ]
	eval_main_while.body_in(v_i.0, v_range.0) -> eval_main_while.cond_in(v_i.0, v_range.0) [ 0 = v_i.0 /\ v_i.0 = v_range.0 ]
	eval_main_while.body_in(v_i.0, v_range.0) -> eval_main_if.then_in(v_i.0, v_range.0) [ 0 < v_i.0 ]
	eval_main_while.body_in(v_i.0, v_range.0) -> eval_main_if.then_in(v_i.0, v_range.0) [ 0 > v_i.0 ]
	eval_main_while.body_in(v_i.0, v_range.0) -> eval_main_if.then_in(v_i.0, v_range.0) [ v_i.0 < v_range.0 ]
	eval_main_while.body_in(v_i.0, v_range.0) -> eval_main_if.then_in(v_i.0, v_range.0) [ v_i.0 > v_range.0 ]
	eval_main_if.then_in(v_i.0, v_range.0) -> eval_main_while.cond_in(0, v_range.0 - 1) [ v_i.0 = v_range.0 ]
	eval_main_if.then_in(v_i.0, v_range.0) -> eval_main_while.cond_in(0, v_range.0) [ v_i.0 = v_range.0 /\ v_i.0 < v_range.0 ]
	eval_main_if.then_in(v_i.0, v_range.0) -> eval_main_while.cond_in(0, v_range.0) [ v_i.0 = v_range.0 /\ v_i.0 > v_range.0 ]
	eval_main_if.then_in(v_i.0, v_range.0) -> eval_main_while.cond_in(v_i.0 + 1, v_range.0 - 1) [ v_i.0 < v_range.0 /\ v_i.0 = v_range.0 ]
	eval_main_if.then_in(v_i.0, v_range.0) -> eval_main_while.cond_in(v_i.0 + 1, v_range.0 - 1) [ v_i.0 > v_range.0 /\ v_i.0 = v_range.0 ]
	eval_main_if.then_in(v_i.0, v_range.0) -> eval_main_while.cond_in(v_i.0 + 1, v_range.0) [ v_i.0 < v_range.0 ]
	eval_main_if.then_in(v_i.0, v_range.0) -> eval_main_while.cond_in(v_i.0 + 1, v_range.0) [ v_i.0 < v_range.0 /\ v_i.0 > v_range.0 ]
	eval_main_if.then_in(v_i.0, v_range.0) -> eval_main_while.cond_in(v_i.0 + 1, v_range.0) [ v_i.0 > v_range.0 /\ v_i.0 < v_range.0 ]
	eval_main_if.then_in(v_i.0, v_range.0) -> eval_main_while.cond_in(v_i.0 + 1, v_range.0) [ v_i.0 > v_range.0 ]
	eval_main_while.end_in() -> eval_main_stop()

Testing for unsatisfiable constraints removes the following rules from problem 1:
	eval_main_if.then_in(v_i.0, v_range.0) -> eval_main_while.cond_in(0, v_range.0) [ v_i.0 = v_range.0 /\ v_i.0 < v_range.0 ]
	eval_main_if.then_in(v_i.0, v_range.0) -> eval_main_while.cond_in(0, v_range.0) [ v_i.0 = v_range.0 /\ v_i.0 > v_range.0 ]
	eval_main_if.then_in(v_i.0, v_range.0) -> eval_main_while.cond_in(v_i.0 + 1, v_range.0 - 1) [ v_i.0 < v_range.0 /\ v_i.0 = v_range.0 ]
	eval_main_if.then_in(v_i.0, v_range.0) -> eval_main_while.cond_in(v_i.0 + 1, v_range.0 - 1) [ v_i.0 > v_range.0 /\ v_i.0 = v_range.0 ]
	eval_main_if.then_in(v_i.0, v_range.0) -> eval_main_while.cond_in(v_i.0 + 1, v_range.0) [ v_i.0 < v_range.0 /\ v_i.0 > v_range.0 ]
	eval_main_if.then_in(v_i.0, v_range.0) -> eval_main_while.cond_in(v_i.0 + 1, v_range.0) [ v_i.0 > v_range.0 /\ v_i.0 < v_range.0 ]
We thus obtain the following problem:
2:	eval_main_start() -> eval_main_entry_in()
	eval_main_entry_in() -> eval_main_while.cond_in(nondef.0, 20)
	eval_main_while.cond_in(v_i.0, v_range.0) -> eval_main_while.body_in(v_i.0, v_range.0) [ 0 <= v_i.0 /\ v_i.0 <= v_range.0 ]
	eval_main_while.cond_in(v_i.0, v_range.0) -> eval_main_while.end_in() [ 0 > v_i.0 ]
	eval_main_while.cond_in(v_i.0, v_range.0) -> eval_main_while.end_in() [ v_i.0 > v_range.0 ]
	eval_main_while.body_in(v_i.0, v_range.0) -> eval_main_while.cond_in(v_i.0, v_range.0) [ 0 = v_i.0 /\ v_i.0 = v_range.0 ]
	eval_main_while.body_in(v_i.0, v_range.0) -> eval_main_if.then_in(v_i.0, v_range.0) [ 0 < v_i.0 ]
	eval_main_while.body_in(v_i.0, v_range.0) -> eval_main_if.then_in(v_i.0, v_range.0) [ 0 > v_i.0 ]
	eval_main_while.body_in(v_i.0, v_range.0) -> eval_main_if.then_in(v_i.0, v_range.0) [ v_i.0 < v_range.0 ]
	eval_main_while.body_in(v_i.0, v_range.0) -> eval_main_if.then_in(v_i.0, v_range.0) [ v_i.0 > v_range.0 ]
	eval_main_if.then_in(v_i.0, v_range.0) -> eval_main_while.cond_in(0, v_range.0 - 1) [ v_i.0 = v_range.0 ]
	eval_main_if.then_in(v_i.0, v_range.0) -> eval_main_while.cond_in(v_i.0 + 1, v_range.0) [ v_i.0 < v_range.0 ]
	eval_main_if.then_in(v_i.0, v_range.0) -> eval_main_while.cond_in(v_i.0 + 1, v_range.0) [ v_i.0 > v_range.0 ]
	eval_main_while.end_in() -> eval_main_stop()

The termination graph of problem 2 contains 1 nontrivial SCC:
3:	eval_main_while.cond_in(v_i.0, v_range.0) -> eval_main_while.body_in(v_i.0, v_range.0) [ 0 <= v_i.0 /\ v_i.0 <= v_range.0 ]
	eval_main_while.body_in(v_i.0, v_range.0) -> eval_main_while.cond_in(v_i.0, v_range.0) [ 0 = v_i.0 /\ v_i.0 = v_range.0 ]
	eval_main_while.body_in(v_i.0, v_range.0) -> eval_main_if.then_in(v_i.0, v_range.0) [ 0 < v_i.0 ]
	eval_main_while.body_in(v_i.0, v_range.0) -> eval_main_if.then_in(v_i.0, v_range.0) [ v_i.0 < v_range.0 ]
	eval_main_if.then_in(v_i.0, v_range.0) -> eval_main_while.cond_in(0, v_range.0 - 1) [ v_i.0 = v_range.0 ]
	eval_main_if.then_in(v_i.0, v_range.0) -> eval_main_while.cond_in(v_i.0 + 1, v_range.0) [ v_i.0 < v_range.0 ]

A polynomial interpretation with
	Pol(eval_main_while.cond_in) = -4*X_1 + 4*X_2 + 2*X_2^2 - 1
	Pol(eval_main_while.body_in) = -4*X_1 + 4*X_2 + 2*X_2^2 - 1
	Pol(eval_main_if.then_in) = -4*X_1 + 4*X_2 + 2*X_2^2 - 2
removes the following rules from problem 3:
	eval_main_while.body_in(v_i.0, v_range.0) -> eval_main_if.then_in(v_i.0, v_range.0) [ v_i.0 < v_range.0 ]
	eval_main_if.then_in(v_i.0, v_range.0) -> eval_main_while.cond_in(v_i.0 + 1, v_range.0) [ v_i.0 < v_range.0 ]
We thus obtain the following problem:
4:	eval_main_while.cond_in(v_i.0, v_range.0) -> eval_main_while.body_in(v_i.0, v_range.0) [ 0 <= v_i.0 /\ v_i.0 <= v_range.0 ]
	eval_main_while.body_in(v_i.0, v_range.0) -> eval_main_while.cond_in(v_i.0, v_range.0) [ 0 = v_i.0 /\ v_i.0 = v_range.0 ]
	eval_main_while.body_in(v_i.0, v_range.0) -> eval_main_if.then_in(v_i.0, v_range.0) [ 0 < v_i.0 ]
	eval_main_if.then_in(v_i.0, v_range.0) -> eval_main_while.cond_in(0, v_range.0 - 1) [ v_i.0 = v_range.0 ]

The termination graph of problem 4 contains 1 nontrivial SCC:
5:	eval_main_while.cond_in(v_i.0, v_range.0) -> eval_main_while.body_in(v_i.0, v_range.0) [ 0 <= v_i.0 /\ v_i.0 <= v_range.0 ]
	eval_main_while.body_in(v_i.0, v_range.0) -> eval_main_while.cond_in(v_i.0, v_range.0) [ 0 = v_i.0 /\ v_i.0 = v_range.0 ]
	eval_main_while.body_in(v_i.0, v_range.0) -> eval_main_if.then_in(v_i.0, v_range.0) [ 0 < v_i.0 ]
	eval_main_if.then_in(v_i.0, v_range.0) -> eval_main_while.cond_in(0, v_range.0 - 1) [ v_i.0 = v_range.0 ]

A polynomial interpretation with
	Pol(eval_main_while.cond_in) = 2*X_1 - 1
	Pol(eval_main_while.body_in) = 2*X_1 - 1
	Pol(eval_main_if.then_in) = 0
removes the following rules from problem 5:
	eval_main_while.body_in(v_i.0, v_range.0) -> eval_main_if.then_in(v_i.0, v_range.0) [ 0 < v_i.0 ]
	eval_main_if.then_in(v_i.0, v_range.0) -> eval_main_while.cond_in(0, v_range.0 - 1) [ v_i.0 = v_range.0 ]
We thus obtain the following problem:
6:	eval_main_while.cond_in(v_i.0, v_range.0) -> eval_main_while.body_in(v_i.0, v_range.0) [ 0 <= v_i.0 /\ v_i.0 <= v_range.0 ]
	eval_main_while.body_in(v_i.0, v_range.0) -> eval_main_while.cond_in(v_i.0, v_range.0) [ 0 = v_i.0 /\ v_i.0 = v_range.0 ]

The termination graph of problem 6 contains 1 nontrivial SCC:
7:	eval_main_while.cond_in(v_i.0, v_range.0) -> eval_main_while.body_in(v_i.0, v_range.0) [ 0 <= v_i.0 /\ v_i.0 <= v_range.0 ]
	eval_main_while.body_in(v_i.0, v_range.0) -> eval_main_while.cond_in(v_i.0, v_range.0) [ 0 = v_i.0 /\ v_i.0 = v_range.0 ]

By chaining the rule eval_main_while.cond_in(v_i.0, v_range.0) -> eval_main_while.body_in(v_i.0, v_range.0) [ 0 <= v_i.0 /\ v_i.0 <= v_range.0 ] with all rule in problem 7, the following new rules are obtained:
	eval_main_while.cond_in(v_i.0, v_range.0) -> eval_main_while.cond_in(v_i.0, v_range.0) [ 0 <= v_i.0 /\ v_i.0 <= v_range.0 /\ 0 = v_i.0 /\ v_i.0 = v_range.0 ]
We thus obtain the following problem:
8:	eval_main_while.body_in(v_i.0, v_range.0) -> eval_main_while.cond_in(v_i.0, v_range.0) [ 0 = v_i.0 /\ v_i.0 = v_range.0 ]
	eval_main_while.cond_in(v_i.0, v_range.0) -> eval_main_while.cond_in(v_i.0, v_range.0) [ 0 <= v_i.0 /\ v_i.0 <= v_range.0 /\ 0 = v_i.0 /\ v_i.0 = v_range.0 ]

The termination graph of problem 8 contains 1 nontrivial SCC:
9:	eval_main_while.cond_in(v_i.0, v_range.0) -> eval_main_while.cond_in(v_i.0, v_range.0) [ 0 <= v_i.0 /\ v_i.0 <= v_range.0 /\ 0 = v_i.0 /\ v_i.0 = v_range.0 ]

The following termination problem could not be handled:
eval_main_while.cond_in(v_i.0, v_range.0) -> eval_main_while.cond_in(v_i.0, v_range.0) [ 0 <= v_i.0 /\ v_i.0 <= v_range.0 /\ 0 = v_i.0 /\ v_i.0 = v_range.0 ]

Time: 1.680 sec (SMT: 1.560 sec)
